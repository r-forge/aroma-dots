<%@ page contentType="text/html"%>

<%
# Copy the Webcuts.js javascript to the response output directory
file.copy(filePath(getPath(page), "incl", "Webcuts.js"), 
          filePath(getPath(response), "reports", "Webcuts.js"));
%>

<%
escapeHtml <- function(text) {
  text <- gsub("<", "&lt;", text);
  text <- gsub(">", "&gt;", text);
  text;
}
%>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
        "http://www.w3.org/TR/REC-html40/loose.dtd">

<%title="R Server Pages"%>

<html>
<head>
 <title><%=title%></title>
 <%@include file="incl/rsp.css.html"%>
 <script type="text/javascript" src="reports/Webcuts.js" language="JavaScript1.2"></script>
</head>

<body>

<h1><%=title%></h1>
<p>
by Henrik Bengtsson 2002-<%=format(Sys.Date(), "%Y")%>.
</p>

<h2>Introduction</h2>
<p>
An <em>R Server Page</em>, or short an <em>RSP</em>, is a document that can be modified by R code.  When an RSP is processed a final document is created.  Typically, the final document is a HTML page, but can be of any format including LaTeX and even R source code.
When processed, an RSP is converted to a so called <em>R servlet</em>, which consists of standard R code.  When the servlet is evaluated it outputs the final document.  This process is illustrated in Figure&nbsp;1.  
</p>
<center>
 <table style="border: 0px; margin: 2ex;">
  <tr>
   <td></td><td><em>translation</em></td><td></td><td><em>evaluation</em></td><td></td>
  </tr> 
  <tr>
   <td>RSP</td><td>=></td><td>R servlet</td><td>=></td><td>final document</td>
  </tr> 
  <tr style="font-size: small;">
   <td>(index.rsp)</td><td></td><td>(index.rsp.R)</td><td></td><td>(index.html)</td>
  </tr> 
 </table>
</center>
<div style="flush: left; font-style: italic; margin: 1ex; margin-bottom: 2ex;">
Figure 1. Processing of an RSP document.  When processed, an RSP document is first translated to an R servlet of plain R code, which is in turn evaluated and outputs the final document.  The filenames within parentesis shows an example where an RSP file is translated into a HTML file.
</div>

The reason for using the names "R Server Page" and "R servlet" are their close similarity to "Java Server Page" (JSP) and "Java Servlet" used to dynamically generate HTML pages on web servers.

<p>
An example of an RSP is:
</p>
<pre class="RspScriptlet"><%@include file="incl/simpleExample.rsp" verbatim="TRUE"%></pre>
<p>
which when translated becomes an R servlet with R source code:
<%
rCode <- translateRsp("incl/simpleExample.rsp", path=getPath(page));
rCode <- escapeHtml(rCode);
rCode <- gsub("^.*####\n", "", rCode);
rCode <- strsplit(rCode, split="\n")[[1]];
rCode <- gsub("^# .*", "", rCode);
rCode <- unlist(sapply(rCode, FUN=substring, first=c(1,76), last=c(75,150)));
rCode <- rCode[nchar(rCode) > 0];
rCode <- paste(rCode, collapse="\n");
%>
<pre class="RspScriptlet"><%=rCode%></pre>
<p>
(the variable <code>response</code> is an instance of class RspResponse, not needed to be understood in order to write RSP:s).  When the R servlet is evaluated, it outputs:
</p>
<div class="HtmlCode"><%@include file="incl/simpleExample.rsp"%></div>
</div>


<h2>More help</h2>
<ul>
 <li><a href="reports/helloWorld.html">Hello world example</a></li>
 <li><a href="reports/includes.html">Includes &amp; Imports</a></li>
 <li><a href="reports/figures.html">Figures</a></li>
</ul>


<%@include file="incl/simpleFooter.rsp"%>
</body>
</html>

