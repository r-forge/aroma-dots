%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Authors: Henrik Bengtsson, hb@stat.berkeley.edu
%          Pierre Neuvial, pierre@stat.berkeley.edu
% Created on: 2009-07-02
%
% Usage:
%  library("R.rsp");
%  rsptex("suppl.tex.rsp");  # => *.tex.rsp => ... => *.dvi
%  rsptex("suppl.tex.rsp", pdf=TRUE);  # => *.tex.rsp => ... => *.pdf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
<%
verbose && enter(verbose, "Setup");
sourceDirectory("R/");
what <- "fracB";

addLegend <- TRUE;
addSdEst <- FALSE;

addBinTrack <- FALSE;
doRocCurves <- FALSE;

trackAspect <- 0.22;
trackWidth <- 0.9;

binCounts <- c(1, 1.25, 1.5, 2, 3, 4); rocCols <- 2;
## binCounts <- binCounts[c(1, 4)]

if (!doRocCurves) binCounts <- TRUE;

byCount <- c(TRUE, FALSE)[1]

fpLim <- c(0,0.5);
## fpLim <- c(0,1);

robust <- c(FALSE, TRUE)[1];
robustStr <- ifelse(robust, "median", "mean");
binFFracB <- ifelse(robust, "median", "mean"); 
confQuantile <- 1

figPath <- "figures/col/";
figForce <- 3;
figDev <- function(..., force=(figForce > 0)) { epsDev(..., path=figPath, force=force) }
figDev <- function(..., force=(figForce > 0)) { pngDev(..., device=png, path=figPath, force=force) }

title <- sprintf("Single sample assessment of the TumorBoost method based on the '%s' data set", dataSet);
authors <- "HB, PN.";
verbose && exit(verbose);
%>

<%
pch <- 19; cex <- 0.5;
pch <- "."; cex <- 2.5;
colorMap <- c("*"="#000000", "NA"="#999999", "1"="red", "2"="orange", "3"="blue", "4"="purple");
smoothedColorMap <-  c("*" = "#000000", "NA" = "#999999");
%>

%\documentclass[a4paper,draft]{article}
\documentclass[a4paper]{article}
\usepackage{graphicx}
\usepackage{fancyvrb}
\usepackage{a4wide}
\usepackage{xspace}
\usepackage{amsmath} 
\usepackage{natbib}

% The search path (within curly brackets and separated by commas)
% where to find graphics files
\graphicspath{{<%=figPath%>}}
\DeclareGraphicsRule{.eps.gz}{eps}{.eps.bb}{`gunzip -c #1}

\newcommand{\pkg}[1]{\textsl{#1}\xspace}

\newcommand{\trackWidth}{<%=trackWidth%>\textwidth}


\title{<%=title%>}
\author{<%=authors%>}

\begin{document}

\maketitle

\section{Introduction}
This report gives a descriptive overview of results of variants of the TumorBoost method in regions of ASCN change.

\section{Data set}

<%
df <- getFile(fracBDsList[[1]],1);
tumorName <- getName(df);
normalName <- sub("ref=","",getTags(df)[1]);
pairName <- paste(tumorName, normalName, sep=" / ");
%>
This report is based on the data set <%=dataSet%>. All data is based on the Affymetrix GenomeWideSNP\_6 chip type.  This evaluation will be based on $\rho$ estimated from one such pair, more precisely the <%=tumorName%> CEL file (tumor) and the <%=normalName%> CEL file (matched normal).

The two CEL files were preprocessed separately using CRMAv2 (without any reference arrays)

\subsection{List of change points}
For this data set, we have selected a few regions for which one safely can assume there exists a single changepoint and for which the fracB distribution looks constant.  This selection was done visually.  For each region we chose large enough safety margin such that the risk for the two sets $\mathcal{J}_A$ and $\mathcal{J}_B$ to contain loci from the other set is extremely small.  

\begin{table}[htp]
\begin{center}
\begin{tabular}{c|c|c|c|c}
Tumor-normal pair & Chromosome & Region & Change point & Safety region \\
\hline
<% for (region in regions) { %>
<%
region <- parseRegion(region);
str(region);
sample <- region$name;
sample <- pairName;
chr <- region$chromosome;
regionStr <- sprintf("%.2f", region$region/1e6);
cp <- region$params$cp[1];
cpStr <- sprintf("%.2f", cp);
delta <- region$params$cp[2];
deltaStr <- sprintf("%.2f", delta);
%>
<%=sample%> & <%=chr%> & <%=regionStr[1]%>-<%=regionStr[2]%> & <%=cpStr%> & <%=deltaStr%> \\
\hline
<% } # for (region ...) %>
\end{tabular}
\end{center}
\caption{Regions used for the evaluation and that each contain a single changepoint.  All positions and lengths are in units of Mb.}
\label{tblRegions}
\end{table}


We now compare the  raw, TBN-NGC, and TBN-Birdseed methods using the afformentioned ROC analysis at the full resolution as well as smoothed resolution with bin sizes $h=\{<%=paste(sprintf("%.1f", binCounts, collapse=", "))%>\}$.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Regions of interest
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<% for (region in regions) { %>
\clearpage
\section{Region: <%=region%>}

<%
print(region);
region <- parseRegion(region);
print(region);
%>


<%
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Count the number of loci with each state
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getNbLociPerState <- function(object) {
  states <- getStates(object);
  tbl <- table(states, exclude=NULL);
  uniqueStates <- as.integer(names(tbl));
  o <- order(abs(uniqueStates));
  tbl <- tbl[o];
  names <- names(tbl);
  sign <- as.integer(names);
  names[sign==0] <- "'NORMAL' (1,1)";
  names[sign==1] <- "'GAIN' (1,2)";
  names[sign==2] <- "'DELETION' (0,1)";
  names[sign==3] <- "'COPY NEUTRAL LOH' (0,2)";
  names(tbl) <- names;
  tbl
}
%>




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: Total copy number
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Total copy number}
<%
what <- "ratios";
cnList <- NULL
figName <- sprintf("%s,%s,track", region$label, what);
if (fig <- figDev(figName, aspect=0.618)) {
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # Plot CN ratios along genome
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  cnList <- getCnList(cnDsList, cnList=cnList, what=what, force=(figForce > 2));
  print(cnList);
  
  nbrOfSources <- length(cnList);
  subplots(nbrOfSources, ncol=1);
  par(mar=c(2.7,2.6,0.2,2)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=1.2);
  xScale <- 1e-6;
  xRange <- range(sapply(cnList, FUN=xRange));
##   states <- na.omit(getUniqueStates(cnList[[1]]));
  states <- getUniqueStates(cnList[[1]]);
  
  cp <- region$params$cp;
  s <- region$params$s;
  cnLab <- "CN";
  if (what == "log2ratios") {
    cnLim <- c(-3,3);
    cnLab <- expression(M == log[2](theta[T]/theta[N]));
  } else {
    cnLim <- c(-0.5,6);
    cnLab <- expression(C == 2*(theta[T]/theta[N]));
  }
  
  for (kk in seq(along=cnList)) {
    cn <- cnList[[kk]];
    name <- names(cnList)[kk];
    xlim <- xRange*xScale;
  
    plot(cn, pch=pch, cex=0.8*cex, xlim=xlim, ylim=cnLim, xScale=xScale, ylab=cnLab);
    xs <- cp["position"]+c(-1,+1)*cp["delta"];
    ys <- par("usr")[3:4];
    dy <- 0.04*diff(ys);
    if (s[1] != 0) {
      rect(xlim[1],ys[1],xs[1],ys[1]+dy, col="#999999");
    } else {
      rect(xs[2],ys[1],xlim[2],ys[1]+dy, col="#999999");
    }
    rect(xs[1],ys[1], xs[2],ys[2], density=10, col="#999999");
##     stext(side=3, pos=0.02, line=-1, cex=1.0, name);
##     if (kk == 1) {
##       stext(side=3, pos=0.98, line=-1.1, cex=0.8, sprintf("Chr%02d", getChromosome(cn)));
##     }
    if (addSdEst) {
      sd <- estimateStandardDeviation(cn);
      stext(side=4, pos=1, line=0, cex=0.8, sprintf("SD=%.3g", sd));
    }
    if (addBinTrack) {
     cn <- extractSubsetByState(cn, states=states);
     
     binWidths <- binCounts
     binWidth <- binWidths[length(binWidths)]
     if (!byCount) {
       binWidth <- round(diff(xRange(cn))/(nbrOfLoci(cn, na.rm=TRUE)-1)*binWidth)
     }
     cnS <- binnedSmoothingByState(cn, from=xRange[1], to=xRange[2], by=binWidth, FUN=binFFracB, byCount=byCount);
      setStateColorMap(cnS, smoothedColorMap);
      points(cnS, pch=pch, cex=0.6*cex, col="white", xScale=xScale);
      points(cnS, pch=pch, cex=0.4*cex, xScale=xScale);
    }
  
  } # for (kk ...)
  devDone(figName);
} # if (figDev(...))
%>

<%
tbl <- sapply(cnList, getNbLociPerState)
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
  \resizebox{\trackWidth}{!}{\includegraphics{<%=fig$fullname%>}}
 \end{center}
 \caption{(<%=region$src%>) 
  There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"), where the
  latter are highlighted with a solid bar beneath. 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure: Total copy number
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\clearpage

<%
test <- function(fracB, ...) {
  testSeparation(fracB, test="ks.test")$statistic;
} 

test <- function(fracB, testFUN, output=c("statistic")) {
  states <- getStates(fracB)
  us <- na.omit(getUniqueStates(fracB))
  testFUN(getSignals(fracB)[states==us[1]], getSignals(fracB)[states==us[2]])[[output]]
}
%>

<%
what <- "fracB";
figTag <- "BAF";
%>

\subsection{<%=what%>}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: <%=what%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
fracBList <- getFracBList(fracBDsList, what=what, pattern=methodPattern, force=(figForce > 2));
print(fracBList);
nbrOfSources <- length(fracBList);

fracBLab <- "FracB";
if (what == "fracB") {
  fracBLim <- c(-0.1,1.1);
  fracBLab <- expression(beta == theta[B]/(theta[A]+theta[B]));
  fracBLab <- expression(beta);
} else if (what == "abs(fracB-1/2)") {
  maxRho <- sapply(fracBList, function(x) max(x$y, na.rm=TRUE))
  fracBLim <- c(-0.02, max(maxRho));
  fracBLab <- expression(rho == abs(beta - 1/2));
  fracBLab <- expression(rho);
}

xScale <- 1e-6;
xRange <- range(sapply(fracBList, FUN=xRange));
states <- na.omit(getUniqueStates(fracBList[[1]]));
xlim <- xRange*xScale;
cp <- region$params$cp;
s <- region$params$s;
xs <- cp["position"]+c(-1,+1)*cp["delta"];
figList <- list();
for (kk in seq(along=fracBList)) {
  name <- names(fracBList)[kk];
  fracB <- fracBList[[kk]];

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # Plot 'what' along genome
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  figName <- sprintf("%s,%s,track,%s", region$label, figTag, name);
  if (fig <- figDev(figName, aspect=trackAspect)) {
    # subplots(nbrOfSources, ncol=1);
    par(mar=c(1.2,2.8,0,2)+0.1, mgp=c(1.9,0.4,0), tcl=-0.3, cex=1.2, las=1);

    plot(fracB, pch=pch, cex=0.8*cex, xlim=xlim, ylim=fracBLim, xScale=xScale, ylab=fracBLab);
    ys <- par("usr")[3:4];
    dy <- 0.04*diff(ys);
    if (s[1] != 0) {
      rect(xlim[1],ys[1],xs[1],ys[1]+dy, col="#999999");
    } else {
      rect(xs[2],ys[1],xlim[2],ys[1]+dy, col="#999999");
    }
    rect(xs[1],ys[1], xs[2],ys[2], density=10, col="#999999");
    stext(side=4, pos=-0.1, line=0, cex=0.8, name, las=3);
    ts <- signif(test(fracB, testFUN=ks.test), digits=2)
    stext(side=4, pos=0, line=-0.7, cex=0.8, sprintf("KS = %s",ts), las=3)
   devDone(figName);
  } # if (figDev(...))
  figList[[kk]] <- fig;
} # for (kk ...)
%>

<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
  <% for (fig in figList) { %>
  \resizebox{\trackWidth}{!}{\includegraphics{<%=fig$fullname%>}}
  <% } %>
 \end{center}
 \caption{(<%=region$src%>) 
  There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"), where the
  latter are highlighted with a solid bar beneath. 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure: <%=what%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\clearpage

<%
whats <- c("fracB", "abs(fracB-1/2)");
figTags <- c("BAF,hets", "MBAF,hets");
%>

<% 
  for (ww in seq(along=whats)) {
  what <- whats[ww];
  figTag <- figTags[ww];
  fracBList <- NULL;
  

  ## get the min number of points (across available genotype calls)
  fracBList <- getFracBList(fracBDsList, what=what, force=(figForce > 2));
  fracBList <- fracBList[1];

  fracBList <- sapply(genTags, function(genTag) {
    extractHeterozygous(fracBList, gcDsList[[genTag]], gcsDsList[[genTag]], confQuantile=confQuantile)
  });
  minNbPoints <- min(sapply(fracBList, function(fracB) table(getStates(fracB))))

  for (gg in seq(along=genTags)) {
    hetsMsg <- sprintf("(plotting only Het SNPs according to %s)", genTags[gg])
    gcN <- gcDsList[[genTags[gg]]]
    gcsN <- gcsDsList[[genTags[gg]]]
%>

\subsection{<%=what%> <%=hetsMsg%>}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: <%=what%> <%=hetsMsg%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
fracBList <- getFracBList(fracBDsList, what=what, pattern=methodPattern, force=(figForce > 2));

fracBList <- extractHeterozygous(fracBList, gcN, gcsN, confQuantile=confQuantile);
fracBList <- lapply(fracBList, FUN=getBalancedRegions, minNbPoints)

print(fracBList);
nbrOfSources <- length(fracBList);

fracBLab <- "FracB";
if (what == "fracB") {
  fracBLim <- c(-0.1,1.1);
  fracBLab <- expression(beta);
} else if (what == "abs(fracB-1/2)") {
  maxRho <- sapply(fracBList, function(x) max(x$y, na.rm=TRUE))
  fracBLim <- c(-0.02, max(maxRho));
  fracBLab <- expression(rho);
}

xScale <- 1e-6;
xRange <- range(sapply(fracBList, FUN=xRange));
states <- na.omit(getUniqueStates(fracBList[[1]]));
xlim <- xRange*xScale;
cp <- region$params$cp;
s <- region$params$s;
xs <- cp["position"]+c(-1,+1)*cp["delta"];
figList <- list();
for (kk in seq(along=fracBList)) {
  name <- names(fracBList)[kk];
  fracB <- fracBList[[kk]];

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # Plot 'what' along genome
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  figName <- sprintf("%s,%s,track,%s,%s", region$label, figTag, name, genTags[gg]);
  if (fig <- figDev(figName, aspect=trackAspect)) {
    # subplots(nbrOfSources, ncol=1);
    par(mar=c(1.2,2.8,0,2)+0.1, mgp=c(1.9,0.4,0), tcl=-0.3, cex=1.2, las=1);

    plot(fracB, pch=pch, cex=0.8*cex, xlim=xlim, ylim=fracBLim, xScale=xScale, ylab=fracBLab);
    ys <- par("usr")[3:4];
    dy <- 0.04*diff(ys);
    if (s[1] != 0) {
      rect(xlim[1],ys[1],xs[1],ys[1]+dy, col="#999999");
    } else {
      rect(xs[2],ys[1],xlim[2],ys[1]+dy, col="#999999");
    }
    rect(xs[1],ys[1], xs[2],ys[2], density=10, col="#999999");
    stext(side=4, pos=-0.1, line=0, cex=0.8, name, las=3);
  if (addSdEst) {
      sd <- estimateStandardDeviation(fracB);
      stext(side=4, pos=1, line=0, cex=0.8, sprintf("SD=%.3g", sd));
    }
    if (addBinTrack && (what=="abs(fracB-1/2)")) {
      binWidths <- binCounts;
      binWidth <- binWidths[length(binWidths)];
      if (!byCount) {
        binWidth <- round(diff(xRange(fracB))/(nbrOfLoci(fracB, na.rm=TRUE)-1)*binWidth)
      }
    fracBS <- binnedSmoothingByState(fracB, from=xRange[1], to=xRange[2], by=binWidth, FUN=binFFracB, byCount=byCount);
     setStateColorMap(fracBS, smoothedColorMap);
      points(fracBS, pch=pch, cex=0.6*cex, col="white", xScale=xScale);
      points(fracBS, pch=pch, cex=0.4*cex, xScale=xScale);
    }
    ts <- signif(test(fracB, testFUN=ks.test), digits=2)
    stext(side=4, pos=0, line=-0.7, cex=0.8, sprintf("KS = %s",ts), las=3)

   devDone(figName);
  } # if (figDev(...))
  figList[[kk]] <- fig;
} # for (kk ...)
%>

<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
  <% for (fig in figList) { %>
  \resizebox{\trackWidth}{!}{\includegraphics{<%=fig$fullname%>}}
  <% } %>
 \end{center}
 \caption{<%=what%> for region <%=region$src%>. Only heterozygous SNPs according to <%=genTags[gg]%> are plotted. There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"), where the
  latter are highlighted with a solid bar beneath. 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure: <%=what%> <%=hetsMsg%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\clearpage

<% } # for (gg in ...) %>
<% } # for (ww in ...) %>

\subsection{Allele-specific copy number estimates}
<%
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Plot ASCNs
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
verbose && enter(verbose, "Plotting (C_A,C_B)")
what <- "ratios";

  xlab <- expression(C[A] == theta[A,T]/theta[N]);
  ylab <- expression(C[B] == theta[B,T]/theta[N]);
  xlab <- expression(C["T,A"] == theta["T,A"]/theta[N]);
  ylab <- expression(C["T,B"] == theta["T,B"]/theta[N]);
  xlab <- expression(C["T,A"] == (1-beta[T])*C);
  ylab <- expression(C["T,B"] == beta[T]*C);
  xlab <- expression(C["T,A"]);
  ylab <- expression(C["T,B"]);
  lim <- c(-0.5,4.5);

  xScale <- 1e-6;
  states <- na.omit(sort(getUniqueStates(fracBList[[1]])));
  cp <- region$params$cp;
  s <- region$params$s;

 # Extract total CNs 
 cnList <- getCnList(cnDsList, cnList=cnList, what=what, force=(figForce > 2));
 cn <- cnList[[1]];
 print(cn);
 C <- getSignals(cn);
 col <- getStateColors(cn, na.rm=TRUE);

fracBList <- getFracBList(fracBDsList, what="fracB", pattern=methodPattern, force=(figForce > 2));

print(fracBList);
nbrOfSources <- length(fracBList);
%>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
<% for (kk in seq(along=fracBList)) {
    name <- names(fracBList)[kk];
    fracB <- fracBList[[kk]];
    figName <- sprintf("%s,ASCN,%s,%s", region$label, what, name);
    ## if (fig <- figDev(figName, aspect=1.12*(1/nbrOfSources))) {
      ##  subplots(nbrOfSources, ncol=nbrOfSources);
      if (fig <- figDev(figName)) {
        par(mar=c(2.7,2.6,1.2,0)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=2);
        beta <- getSignals(fracB);
        CA <- (1-beta) * C;
        CB <- beta * C;
        plot(NA, col=col, xlim=lim, ylim=lim, xlab=xlab, ylab=ylab);
        for (c in 2) lines(x=c(0,c), y=c(c,0), lty=1, lwd=2, col="#999999");
        stext(side=3, pos=0, line=-0.3, cex=2.0, name);
        points(CA, CB, col=col, pch=pch, cex=cex);
        devDone(figName);
      } # if (figDev(...))
%> \resizebox{0.33\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}      
<% } # for (kk ...) %>
 \end{center}
 \caption{(<%=region$src%>) 
  There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"). 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<%    verbose && exit(verbose); %>
\clearpage

\subsection{$(\beta_N, \beta_T)$ plots}
<%
verbose && enter(verbose, "Plotting (beta_N, beta_T")
what <- "fracB"
fracBList <- getFracBList(fracBDsList, what=what, pattern=methodPattern, force=(figForce > 2));

fracBN <- getFracBList(list(dsN), what=what, force=(figForce > 2))[[1]];
betaN <- getSignals(fracBN)

print(fracBList);
nbrOfSources <- length(fracBList);
%>

<%
 xScale <- 1e-6;
 cp <- region$params$cp;
  s <- region$params$s;
 
  xlab <- expression(beta[N] == theta[B,N]/theta[N]);
  ylab <- expression(beta[T] == theta[B,T]/theta[T]);
  xlab <- expression(beta[N]);
  ylab <- expression(beta[T]);
  lim <- c(-0.1,1.1);

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Plot $(\beta_N, \beta_T)$
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

%>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: (betaN, betaT) for both regions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
<%  for (kk in seq(along=fracBList)) {
    name <- names(fracBList)[kk];
    fracB <- fracBList[[kk]];
    col <- getStateColors(fracB);
    betaT <- getSignals(fracB);
    figName <- sprintf("%s,betaNvsBetaT,%s,%s", region$label, what,name);
##if (fig <- figDev(figName, aspect=1.12*(1/nbrOfSources))) {
##   subplots(nbrOfSources, ncol=nbrOfSources);
if (fig <- figDev(figName)) {
  par(mar=c(2.7,2.6,1.2,0)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=2);
  plot(NA, xlim=lim, ylim=lim, xlab=xlab, ylab=ylab, axes=FALSE);
  axis(side=1, at=c(0,1/2,1));
  axis(side=2, at=c(0,1/2,1));
  box();  # optional?

  abline(a=0, b=1, lty=2, lwd=1, col="#999999");
  points(betaN, betaT, pch=pch, col=col);
  stext(side=3, pos=0, line=-0.3, cex=2.0, name);
 devDone(figName);
} # if (figDev(...)) %>\resizebox{0.33\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}
<%  } # for (kk ...) %>
 \end{center}
 \caption{(<%=region$src%>) 
  There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"). 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<% verbose && exit(verbose); %>

\clearpage


<% } # for (region in regions) %>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Regions of interest
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% References
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\bibliography{bioinformatics-journals-abbr,hb-at-maths.lth.se}
%\bibliographystyle{plain}
\bibliographystyle{natbib}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Session information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\appendix
\section{Data files}
\begin{Verbatim}[fontfamily=helvetica]
<%={x <- capture.output(print(fracBDsList));x <- gsub(": .*/(totalAndFracBData/)", ": \\1", x);paste(x, collapse="\n");}%>
\end{Verbatim}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Session information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Session information}
This report was automatically generated using the R.rsp package.
<%=toLatex(sessionInfo())%>


\end{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HISTORY:
% 2009-07-02
% o Created from main.tex.rsp.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
