%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Authors: Henrik Bengtsson, hb@stat.berkeley.edu
%          Pierre Neuvial, pierre@stat.berkeley.edu
% Created on: 2009-02-23
% Modified on: 2009-06-13
%
% Usage:
%  library("R.rsp");
%  rsptex("main.tex.rsp");  # => *.tex.rsp => ... => *.dvi
%  rsptex("main.tex.rsp", pdf=TRUE);  # => *.tex.rsp => ... => *.pdf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
<%
verbose && enter(verbose, "Setup");
sourceDirectory("R/");
what <- "fracB";
addLegend <- TRUE;
addSdEst <- FALSE;
addBinTrack <- FALSE;

trackAspect <- 0.22;
trackWidth <- 0.9;

binCounts <- c(1, 1.25, 1.5, 2, 3, 4); rocCols <- 2;
## binCounts <- binCounts[c(1, 4)]

fracNbPoints <- c(1,1/2,1/3,1/5,1/10,1/20); rocCols <- 2;

byCount <- c(TRUE, FALSE)[1]

fpLim <- c(0,0.5);
## fpLim <- c(0,1);

robust <- c(FALSE, TRUE)[1];
robustStr <- ifelse(robust, "median", "mean");
binFFracB <- ifelse(robust, "median", "mean"); 
confQuantile <- 1

figPath <- "figures/col/";
figForce <- 1;
figDev <- function(..., force=(figForce > 0)) { epsDev(..., path=figPath, force=force) }
figDev <- function(..., force=(figForce > 0)) { pngDev(..., device=png, path=figPath, force=force) }

title <- sprintf("Single sample assessment of the TumorBoost method based on the '%s' data set", dataSet);
authors <- "HB, PN.";
verbose && exit(verbose);
%>

<%
pch <- 19; cex <- 0.5;
pch <- "."; cex <- 2;
colorMap <- c("*"="#000000", "NA"="#999999", "1"="red", "2"="orange", "3"="blue", "4"="purple");
smoothedColorMap <-  c("*" = "#000000", "NA" = "#999999");
%>

%\documentclass[a4paper,draft]{article}
\documentclass[a4paper]{article}
\usepackage{graphicx}
\usepackage{fancyvrb}
\usepackage{a4wide}
\usepackage{xspace}
\usepackage{amsmath} 
\usepackage{natbib}

% The search path (within curly brackets and separated by commas)
% where to find graphics files
\graphicspath{{<%=figPath%>}}
\DeclareGraphicsRule{.eps.gz}{eps}{.eps.bb}{`gunzip -c #1}

\newcommand{\pkg}[1]{\textsl{#1}\xspace}

\newcommand{\trackWidth}{<%=trackWidth%>\textwidth}


\title{<%=title%>}
\author{<%=authors%>}

\begin{document}

\maketitle

\section{Introduction}
This report provides a single-sample approach to assess the performance of the TumorBoost method.  The results presented herein are intended to complement the results presented in the main manuscript.

\section{Method}
Consider a local genomic region with loci where there exists exactly one change point in the distribution of the allele B fraction (fracB, or $\beta$) at position $x_0$ and that the true distribution at each side of the changepoint is constant.

Assume that we can identify this changepoint and with very high confidence locate it to be within $[x_0-\delta, x_0+\delta)$ where we refer to $\delta$ as the safety margin on each side of the changepoint.
Then we can assess how well we can detect this changepoint given the two sets of data points one each side of changepoint with the safety margin excluded.

Allele~B fractions cannot be easily segmented along the genome "as is", because their distribution in any given region has several modes.  However, if we assume normal genotypes are known and focus on loci that are heterozygous, then $\rho = \vert \beta - 1/2 \vert$ has only one mode and can be segmented easily.
Here we will use normal genotype calls to identify a set of loci that are heterozygous. We focus on the SNPs in which we are the most confident that they are heterozygous: the evaluation will involve the <%=100*confQuantile%>\% SNPs with highest genotype confidence scores.

Whenever we compare different sets of data we constrain the number of data points to be the same for all data sets by sampling without replacement the minimum number of data points from each data set. Thus we know that we are actually comparing things at the same resolution.

\subsection{Receiver Operator Characteristic performance}
One approach is to use Receiver Operator Characteristic (ROC) analysis analogously to what is done in the (single-sample) evaluation method presented in \citet{BengtssonH_etal_2009b}.
Given the changepoint and excluding all loci within the safety margin, the remaining $J$ loci are split up in two data sets $\mathcal{J}_A = \{x_j \leq x_0 - \delta; j=1,\ldots,J\}$ and $\mathcal{J}_B = \{x_j > x_0 + \delta; j=1,\ldots,J\}$, where $x_j$ is the position of locus $j$ and $J$ is the total number of loci.  
Continuing, let $\mathcal{P}_s = \{\rho_j; j \in \mathcal{J}_s\}$ denote the (full-resolution) $\rho$ estimates of set $s \in \{A,B\}$ obtained by one of the preprocessing methods of interest.

Without loss of generality, assume the loci in $\mathcal{J}_A$ correspond to a balanced normal region PSCN=(1,1) and the ones in $\mathcal{J}_B$ correspond to a deletion: PSCN=(1,0).
By using a (global) threshold/cutoff $\tau$ we can then call the state for each locus.  We say that locus $j$ belongs to the state $B$ if $\rho_j \leq \tau$. Let $\mathcal{J}_{+} = \{\rho_j \leq \tau; j=1,\ldots,J\}$ be all such loci.  Let $\mathcal{J}_{-} = \{\rho_j > \tau; j=1,\ldots,J\}$ be the remaining loci, which are said to belong to state $A$. 
%%  As above, let $J_{+}$ and $J_{-}$ be the number of loci in each of these sets.
Then $\mathcal{J}_{+|B} = \mathcal{J}_{+} \cap \mathcal{J}_{B}$ represents the set of true positives (true deletions correctly called deletions) and $\mathcal{J}_{+|A} = \mathcal{J}_{+} \cap \mathcal{J}_{A}$ represents the set of false positives (true copy neutral loci incorrectly called deletions).
Finally, with $|\mathcal{J}|$ denoting the cardinality of the set $\mathcal{J}$, we define $\gamma = \gamma(\tau) = |\mathcal{J}_{+|B}| / |\mathcal{J}_{B}| \in [0,1]$ and $\alpha = \alpha(\tau) = |\mathcal{J}_{+|A}| / |\mathcal{J}_{A}| \in [0,1]$ to be the true-positive (TP) rate and the false-positive (FP) rate, respectively.  The Receiver Operator Characteristic (ROC) performance is defined by the ROC curve $R(\tau): \tau \rightarrow (\alpha,\gamma) \in [0,1]^2$.

\paragraph{\bf Note:} Too many $\beta$ here.


\subsection{Performance at different levels of resolution}
By smoothing the data points in each set ($s = \{A,B\}$) by binning the loci in non-overlapping bins of width $h$, we can generate a new set of smoothed $\rho$ on which we can do ROC analysis.  Since the smoothed estimates are less noisy, the TP rate will increase at any given FP rate.  The price for achieving this is that the resolution at which we can detect change points decreases.

\subsection{Comparing methods}
For each method $p \in \{\textnormal{raw}; \textnormal{TBN,NGC}; \textnormal{TBN,Birdseed}\}$ we will obtain one ROC curve $R_{p}(\cdot)$. 
With standard ROC analysis we can then compare the relative performance of the different preprocessing methods.


%%For the case where there are two changepoints $x_A$ and $x_B$, we assume (where it is visually "obvious") that they divide up the local region into two similar data sets.  The region within the two breakpoints define the $\mathcal{J}_B$ set and the ones outside the $\mathcal{J}_A$ set.  


\section{Data set}

<%
df <- getFile(fracBDsList[[1]],1);
tumorName <- getName(df);
normalName <- sub("ref=","",getTags(df)[1]);
pairName <- paste(tumorName, normalName, sep=" / ");
%>
This report is based on the data set <%=dataSet%>. All data is based on the Affymetrix GenomeWideSNP\_6 chip type.  This evaluation will be based on $\rho$ estimated from one such pair, more precisely the <%=tumorName%> CEL file (tumor) and the <%=normalName%> CEL file (matched normal).

The two CEL files were preprocessed separately using CRMAv2 (without any reference arrays)

\subsection{List of change points}
For this data set, we have selected a few regions for which one safely can assume there exists a single changepoint and for which the fracB distribution looks constant.  This selection was done visually.  For each region we chose large enough safety margin such that the risk for the two sets $\mathcal{J}_A$ and $\mathcal{J}_B$ to contain loci from the other set is extremely small.  

\begin{table}[htp]
\begin{center}
\begin{tabular}{c|c|c|c|c}
Tumor-normal pair & Chromosome & Region & Change point & Safety region \\
\hline
<% for (region in regions) { %>
<%
region <- parseRegion(region);
str(region);
sample <- region$name;
sample <- pairName;
chr <- region$chromosome;
regionStr <- sprintf("%.2f", region$region/1e6);
cp <- region$params$cp[1];
cpStr <- sprintf("%.2f", cp);
delta <- region$params$cp[2];
deltaStr <- sprintf("%.2f", delta);
%>
<%=sample%> & <%=chr%> & <%=regionStr[1]%>-<%=regionStr[2]%> & <%=cpStr%> & <%=deltaStr%> \\
\hline
<% } # for (region ...) %>
\end{tabular}
\end{center}
\caption{Regions used for the evaluation and that each contain a single changepoint.  All positions and lengths are in units of Mb.}
\label{tblRegions}
\end{table}


We now compare the  raw, TBN-NGC, and TBN-Birdseed methods using the afformentioned ROC analysis at the full resolution as well as smoothed resolution with bin sizes $h=\{<%=paste(sprintf("%.1f", binCounts, collapse=", "))%>\}$.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Regions of interest
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<% for (region in regions) { %>
\clearpage
\section{Region: <%=region%>}

<%
print(region);
region <- parseRegion(region);
print(region);
%>


<%
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Count the number of loci with each state
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getNbLociPerState <- function(object) {
  states <- getStates(object);
  tbl <- table(states, exclude=NULL);
  uniqueStates <- as.integer(names(tbl));
  o <- order(abs(uniqueStates));
  tbl <- tbl[o];
  names <- names(tbl);
  sign <- as.integer(names);
  names[sign==0] <- "'NORMAL' (1,1)";
  names[sign==1] <- "'GAIN' (1,2)";
  names[sign==2] <- "'DELETION' (0,1)";
  names[sign==3] <- "'COPY NEUTRAL LOH' (0,2)";
  names(tbl) <- names;
  tbl
}
%>




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: Total copy number
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Total copy number}
<%
what <- "ratios";
cnList <- NULL
figName <- sprintf("%s,%s,track", region$label, what);
if (fig <- figDev(figName, aspect=0.618)) {
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # Plot CN ratios along genome
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  cnList <- getCnList(cnDsList, cnList=cnList, what=what, force=(figForce > 2));
  print(cnList);
  
  nbrOfSources <- length(cnList);
  subplots(nbrOfSources, ncol=1);
  par(mar=c(2.7,2.6,0.2,2)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=1.2);
  xScale <- 1e-6;
  xRange <- range(sapply(cnList, FUN=xRange));
##   states <- na.omit(getUniqueStates(cnList[[1]]));
  states <- getUniqueStates(cnList[[1]]);
  
  cp <- region$params$cp;
  s <- region$params$s;
  cnLab <- "CN";
  if (what == "log2ratios") {
    cnLim <- c(-3,3);
    cnLab <- expression(M == log[2](theta[T]/theta[N]));
  } else {
    cnLim <- c(-0.5,6);
    cnLab <- expression(C == 2*(theta[T]/theta[N]));
  }
  
  for (kk in seq(along=cnList)) {
    cn <- cnList[[kk]];
    name <- names(cnList)[kk];
    xlim <- xRange*xScale;
  
    plot(cn, pch=pch, cex=0.8*cex, xlim=xlim, ylim=cnLim, xScale=xScale, ylab=cnLab);
    xs <- cp["position"]+c(-1,+1)*cp["delta"];
    ys <- par("usr")[3:4];
    dy <- 0.04*diff(ys);
    if (s[1] != 0) {
      rect(xlim[1],ys[1],xs[1],ys[1]+dy, col="#999999");
    } else {
      rect(xs[2],ys[1],xlim[2],ys[1]+dy, col="#999999");
    }
    rect(xs[1],ys[1], xs[2],ys[2], density=10, col="#999999");
##     stext(side=3, pos=0.02, line=-1, cex=1.0, name);
##     if (kk == 1) {
##       stext(side=3, pos=0.98, line=-1.1, cex=0.8, sprintf("Chr%02d", getChromosome(cn)));
##     }
    if (addSdEst) {
      sd <- estimateStandardDeviation(cn);
      stext(side=4, pos=1, line=0, cex=0.8, sprintf("SD=%.3g", sd));
    }
    if (addBinTrack) {
     cn <- extractSubsetByState(cn, states=states);
     
     binWidths <- binCounts
     binWidth <- binWidths[length(binWidths)]
     if (!byCount) {
       binWidth <- round(diff(xRange(cn))/(nbrOfLoci(cn, na.rm=TRUE)-1)*binWidth)
     }
     cnS <- binnedSmoothingByState(cn, from=xRange[1], to=xRange[2], by=binWidth, FUN=binFFracB, byCount=byCount);
      setStateColorMap(cnS, smoothedColorMap);
      points(cnS, pch=pch, cex=0.6*cex, col="white", xScale=xScale);
      points(cnS, pch=pch, cex=0.4*cex, xScale=xScale);
    }
  
  } # for (kk ...)
  devDone(figName);
} # if (figDev(...))
%>

<%
tbl <- sapply(cnList, getNbLociPerState)
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
  \resizebox{\trackWidth}{!}{\includegraphics{<%=fig$fullname%>}}
 \end{center}
 \caption{(<%=region$src%>) 
  There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"), where the
  latter are highlighted with a solid bar beneath. 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure: Total copy number
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\clearpage

<%
test <- function(fracB, ...) {
  testSeparation(fracB, test="ks.test")$statistic;
} 

test <- function(fracB, testFUN, output=c("statistic")) {
  states <- getStates(fracB)
  us <- na.omit(getUniqueStates(fracB))
  testFUN(getSignals(fracB)[states==us[1]], getSignals(fracB)[states==us[2]])[[output]]
}
%>

<%
what <- "fracB";
figTag <- "BAF";
%>

\subsection{<%=what%>}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: <%=what%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
fracBList <- getFracBList(fracBDsList, what=what, force=(figForce > 2));
keep <- grep(methodPattern, names(fracBList));
fracBList <- fracBList[keep];
print(fracBList);
nbrOfSources <- length(fracBList);

fracBLab <- "FracB";
if (what == "fracB") {
  fracBLim <- c(-0.1,1.1);
  fracBLab <- expression(beta == theta[B]/(theta[A]+theta[B]));
  fracBLab <- expression(beta);
} else if (what == "abs(fracB-1/2)") {
  maxRho <- sapply(fracBList, function(x) max(x$y, na.rm=TRUE))
  fracBLim <- c(-0.02, max(maxRho));
  fracBLab <- expression(rho == abs(beta - 1/2));
  fracBLab <- expression(rho);
}

xScale <- 1e-6;
xRange <- range(sapply(fracBList, FUN=xRange));
states <- na.omit(getUniqueStates(fracBList[[1]]));
xlim <- xRange*xScale;
cp <- region$params$cp;
s <- region$params$s;
xs <- cp["position"]+c(-1,+1)*cp["delta"];
figList <- list();
for (kk in seq(along=fracBList)) {
  name <- names(fracBList)[kk];
  fracB <- fracBList[[kk]];

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # Plot 'what' along genome
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  figName <- sprintf("%s,%s,track,%s", region$label, figTag, name);
  if (fig <- figDev(figName, aspect=trackAspect)) {
    # subplots(nbrOfSources, ncol=1);
    par(mar=c(1.2,2.8,0,2)+0.1, mgp=c(1.9,0.4,0), tcl=-0.3, cex=1.2, las=1);

    plot(fracB, pch=pch, cex=0.8*cex, xlim=xlim, ylim=fracBLim, xScale=xScale, ylab=fracBLab);
    ys <- par("usr")[3:4];
    dy <- 0.04*diff(ys);
    if (s[1] != 0) {
      rect(xlim[1],ys[1],xs[1],ys[1]+dy, col="#999999");
    } else {
      rect(xs[2],ys[1],xlim[2],ys[1]+dy, col="#999999");
    }
    rect(xs[1],ys[1], xs[2],ys[2], density=10, col="#999999");
    stext(side=4, pos=-0.1, line=0, cex=0.8, name, las=3);
    ts <- signif(test(fracB, testFUN=ks.test), digits=2)
    stext(side=4, pos=0, line=-0.7, cex=0.8, sprintf("KS = %s",ts), las=3)
   devDone(figName);
  } # if (figDev(...))
  figList[[kk]] <- fig;
} # for (kk ...)
%>

<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
  <% for (fig in figList) { %>
  \resizebox{\trackWidth}{!}{\includegraphics{<%=fig$fullname%>}}
  <% } %>
 \end{center}
 \caption{(<%=region$src%>) 
  There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"), where the
  latter are highlighted with a solid bar beneath. 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure: <%=what%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\clearpage

<%
whats <- c("fracB", "abs(fracB-1/2)");
figTags <- c("BAF,hets", "MBAF,hets");
%>

<% 
  for (ww in seq(along=whats)) {
  what <- whats[ww];
  figTag <- figTags[ww];
  fracBList <- NULL;
  

  ## get the min number of points (across available genotype calls)
  fracBList <- getFracBList(fracBDsList, what=what, force=(figForce > 2));
  fracBList <- fracBList[1];

  fracBList <- sapply(genTags, function(genTag) {
    extractHeterozygous(fracBList, gcDsList[[genTag]], gcsDsList[[genTag]], confQuantile=confQuantile)
  });
  minNbPoints <- min(sapply(fracBList, function(fracB) table(getStates(fracB))))

  for (gg in seq(along=genTags)) {
    hetsMsg <- sprintf("(plotting only Het SNPs according to %s)", genTags[gg])
    gcN <- gcDsList[[genTags[gg]]]
    gcsN <- gcsDsList[[genTags[gg]]]
%>

\subsection{<%=what%> <%=hetsMsg%>}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: <%=what%> <%=hetsMsg%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
fracBList <- getFracBList(fracBDsList, what=what, force=(figForce > 2));
keep <- grep(methodPattern, names(fracBList));
fracBList <- fracBList[keep];

fracBList <- extractHeterozygous(fracBList, gcN, gcsN, confQuantile=confQuantile);
fracBList <- lapply(fracBList, FUN=getBalancedRegions, minNbPoints)

print(fracBList);
nbrOfSources <- length(fracBList);

fracBLab <- "FracB";
if (what == "fracB") {
  fracBLim <- c(-0.1,1.1);
  fracBLab <- expression(beta);
} else if (what == "abs(fracB-1/2)") {
  maxRho <- sapply(fracBList, function(x) max(x$y, na.rm=TRUE))
  fracBLim <- c(-0.02, max(maxRho));
  fracBLab <- expression(rho);
}

xScale <- 1e-6;
xRange <- range(sapply(fracBList, FUN=xRange));
states <- na.omit(getUniqueStates(fracBList[[1]]));
xlim <- xRange*xScale;
cp <- region$params$cp;
s <- region$params$s;
xs <- cp["position"]+c(-1,+1)*cp["delta"];
figList <- list();
for (kk in seq(along=fracBList)) {
  name <- names(fracBList)[kk];
  fracB <- fracBList[[kk]];

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # Plot 'what' along genome
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  figName <- sprintf("%s,%s,track,%s,%s", region$label, figTag, name, genTags[gg]);
  if (fig <- figDev(figName, aspect=trackAspect)) {
    # subplots(nbrOfSources, ncol=1);
    par(mar=c(1.2,2.8,0,2)+0.1, mgp=c(1.9,0.4,0), tcl=-0.3, cex=1.2, las=1);

    plot(fracB, pch=pch, cex=0.8*cex, xlim=xlim, ylim=fracBLim, xScale=xScale, ylab=fracBLab);
    ys <- par("usr")[3:4];
    dy <- 0.04*diff(ys);
    if (s[1] != 0) {
      rect(xlim[1],ys[1],xs[1],ys[1]+dy, col="#999999");
    } else {
      rect(xs[2],ys[1],xlim[2],ys[1]+dy, col="#999999");
    }
    rect(xs[1],ys[1], xs[2],ys[2], density=10, col="#999999");
    stext(side=4, pos=-0.1, line=0, cex=0.8, name, las=3);
  if (addSdEst) {
      sd <- estimateStandardDeviation(fracB);
      stext(side=4, pos=1, line=0, cex=0.8, sprintf("SD=%.3g", sd));
    }
    if (addBinTrack && (what=="abs(fracB-1/2)")) {
      binWidths <- binCounts;
      binWidth <- binWidths[length(binWidths)];
      if (!byCount) {
        binWidth <- round(diff(xRange(fracB))/(nbrOfLoci(fracB, na.rm=TRUE)-1)*binWidth)
      }
    fracBS <- binnedSmoothingByState(fracB, from=xRange[1], to=xRange[2], by=binWidth, FUN=binFFracB, byCount=byCount);
     setStateColorMap(fracBS, smoothedColorMap);
      points(fracBS, pch=pch, cex=0.6*cex, col="white", xScale=xScale);
      points(fracBS, pch=pch, cex=0.4*cex, xScale=xScale);
    }
    ts <- signif(test(fracB, testFUN=ks.test), digits=2)
    stext(side=4, pos=0, line=-0.7, cex=0.8, sprintf("KS = %s",ts), las=3)

   devDone(figName);
  } # if (figDev(...))
  figList[[kk]] <- fig;
} # for (kk ...)
%>

<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
  <% for (fig in figList) { %>
  \resizebox{\trackWidth}{!}{\includegraphics{<%=fig$fullname%>}}
  <% } %>
 \end{center}
 \caption{<%=what%> for region <%=region$src%>. Only heterozygous SNPs according to <%=genTags[gg]%> are plotted. There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"), where the
  latter are highlighted with a solid bar beneath. 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure: <%=what%> <%=hetsMsg%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\clearpage

<% } # for (gg in ...) %>
<% } # for (ww in ...) %>

\subsection{Allele-specific copy number estimates}
<%
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Plot ASCNs
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
verbose && enter(verbose, "Plotting (C_A,C_B)")
what <- "ratios";

  xlab <- expression(C[A] == theta[A,T]/theta[N]);
  ylab <- expression(C[B] == theta[B,T]/theta[N]);
  xlab <- expression(C["T,A"] == theta["T,A"]/theta[N]);
  ylab <- expression(C["T,B"] == theta["T,B"]/theta[N]);
  xlab <- expression(C["T,A"] == (1-beta[T])*C);
  ylab <- expression(C["T,B"] == beta[T]*C);
  xlab <- expression(C["T,A"]);
  ylab <- expression(C["T,B"]);
  lim <- c(-0.5,4.5);

  xScale <- 1e-6;
  states <- na.omit(sort(getUniqueStates(fracBList[[1]])));
  cp <- region$params$cp;
  s <- region$params$s;

 # Extract total CNs 
 cnList <- getCnList(cnDsList, cnList=cnList, what=what, force=(figForce > 2));
 cn <- cnList[[1]];
 print(cn);
 C <- getSignals(cn);
 col <- getStateColors(cn, na.rm=TRUE);

fracBList <- getFracBList(fracBDsList, what="fracB", force=(figForce > 2));
keep <- grep(methodPattern, names(fracBList));
fracBList <- fracBList[keep];

print(fracBList);
nbrOfSources <- length(fracBList);
%>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
<% for (kk in seq(along=fracBList)) {
    name <- names(fracBList)[kk];
    fracB <- fracBList[[kk]];
    figName <- sprintf("%s,ASCN,%s,%s", region$label, what, name);
    ## if (fig <- figDev(figName, aspect=1.12*(1/nbrOfSources))) {
      ##  subplots(nbrOfSources, ncol=nbrOfSources);
      if (fig <- figDev(figName)) {
        par(mar=c(2.7,2.6,1.2,0)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=2);
        beta <- getSignals(fracB);
        CA <- (1-beta) * C;
        CB <- beta * C;
        plot(NA, col=col, xlim=lim, ylim=lim, xlab=xlab, ylab=ylab);
        for (c in 2) lines(x=c(0,c), y=c(c,0), lty=1, lwd=2, col="#999999");
        stext(side=3, pos=0, line=-0.3, cex=2.0, name);
        points(CA, CB, col=col, pch=pch, cex=cex);
        devDone(figName);
      } # if (figDev(...))
%> \resizebox{0.33\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}      
<% } # for (kk ...) %>
 \end{center}
 \caption{(<%=region$src%>) 
  There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"). 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<%    verbose && exit(verbose); %>
\clearpage

\subsection{$(\beta_N, \beta_T)$ plots}
<%
verbose && enter(verbose, "Plotting (beta_N, beta_T")
what <- "fracB"
fracBList <- getFracBList(fracBDsList, what=what, force=(figForce > 2));
keep <- grep(methodPattern, names(fracBList));
fracBList <- fracBList[keep];

fracBN <- getFracBList(list(dsN), what=what, force=(figForce > 2))[[1]];
betaN <- getSignals(fracBN)

print(fracBList);
nbrOfSources <- length(fracBList);
%>

<%
 xScale <- 1e-6;
 cp <- region$params$cp;
  s <- region$params$s;
 
  xlab <- expression(beta[N] == theta[B,N]/theta[N]);
  ylab <- expression(beta[T] == theta[B,T]/theta[T]);
  xlab <- expression(beta[N]);
  ylab <- expression(beta[T]);
  lim <- c(-0.1,1.1);

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Plot $(\beta_N, \beta_T)$
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

%>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: (betaN, betaT) for both regions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

\begin{figure}[htb]
 \begin{center}
<%  for (kk in seq(along=fracBList)) {
    name <- names(fracBList)[kk];
    fracB <- fracBList[[kk]];
    col <- getStateColors(fracB);
    betaT <- getSignals(fracB);
    figName <- sprintf("%s,betaNvsBetaT,%s,%s", region$label, what,name);
##if (fig <- figDev(figName, aspect=1.12*(1/nbrOfSources))) {
##   subplots(nbrOfSources, ncol=nbrOfSources);
if (fig <- figDev(figName)) {
  par(mar=c(2.7,2.6,1.2,0)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=2);
  plot(NA, xlim=lim, ylim=lim, xlab=xlab, ylab=ylab, axes=FALSE);
  axis(side=1, at=c(0,1/2,1));
  axis(side=2, at=c(0,1/2,1));
  box();  # optional?

  abline(a=0, b=1, lty=2, lwd=1, col="#999999");
  points(betaN, betaT, pch=pch, col=col);
  stext(side=3, pos=0, line=-0.3, cex=2.0, name);
 devDone(figName);
} # if (figDev(...)) %>\resizebox{0.33\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}
<%  } # for (kk ...) %>
 \end{center}
 \caption{(<%=region$src%>) 
  There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
  <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"). 
  In total <%=tbl[3]%> loci within the safety margin were excluded.
 }
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure: (betaN, betaT) for each state separately
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

<%  for (kk in seq(along=fracBList)) { %>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% BEGIN Figure: (betaN, betaT) for each state separately: <%=names(fracBList)[kk]%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\begin{figure}[htb]
  \begin{center}
<%
    name <- names(fracBList)[kk];
    fracB <- fracBList[[kk]];
    ustates <- na.omit(getUniqueStates(fracB));
    for (ss in seq(along=ustates)) {
      fracBState <- extractSubsetByState(fracB, state=ustates[ss]);
      fracBNState <- extractSubsetByState(fracBN, state=ustates[ss]);
      betaN <- getSignals(fracBNState)

      betaT <- getSignals(fracBState);

      ## genotype calls
      genName <- unlist(strsplit(name, ","))
      genName <- genName[length(genName)]
      genTag <- ifelse(genName=="raw", "NGC", genName);
      gcN <- gcDsList[[genTag]]
      idx <- indexOf(gcN, region$name);
      gf <- getFile(gcN, idx);
      isHet <- isHeterozygous(gf, units=fracBNState$unit, drop=TRUE);
      
      if (name =="raw") {
        ## slope: exploiting symmetries...
        slopeDatAbove <- betaT/betaN;
        slopeDatBelow <- (1-betaT)/(1-betaN);
        slopeDat <- slopeDatAbove;
        slopeDat[which(slopeDat>1)] <- slopeDatBelow[which(slopeDat>1)];
        
        hetSlope <- mean(slopeDat[isHet], na.rm=TRUE);
        homSlope <- mean(slopeDat[!isHet], na.rm=TRUE);
        slopeList <- list(hom=homSlope, het=hetSlope);
      } else {
        slopeList <- NULL;
      }
      
      col <- 1+isHet;

      figName <- sprintf("%s,betaNvsBetaT,%s,%s,%s,state=%s", region$label, what, name, genTag, ustates[ss]);
      if (fig <- figDev(figName)) {
        par(mar=c(2.7,2.6,1.2,0)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=2);
        plot(NA, xlim=lim, ylim=lim, xlab=xlab, ylab=ylab, axes=FALSE);
        axis(side=1, at=c(0,1/2,1));
        axis(side=2, at=c(0,1/2,1));
##        box();  # optional?

        ## box
        a <- rep(0,3);
        b <- rep(1,3);
        c <- 0:2/2;
        segments(a, c, b, c, col="#999999");
        segments(c, a, c, b, col="#999999");

        points(betaN, betaT, pch=pch, col=col);
        abline(a=0, b=1, lty=2, lwd=1, col="#999999");
        for (ll in seq(along=slopeList)) {
          slp <- slopeList[[ll]];
          x0 <- rep(0, 2);
          x1 <- rep(1, 2);
          y0 <- c(0, 1-slp);
          y1 <- c(slp, 1);
          segments(x0, y0, x1, y1, lty=1, lwd=2, col="white");
          segments(x0, y0, x1, y1, lty=1, lwd=1, col=ll);
        }
        stext(side=4, pos=0, line=-0.8, cex=2.0, sprintf("%s,%s", name, genTag));
        stext(side=3, pos=0, line=-0.3, cex=2.0, names(tbl)[ss]);
        devDone(figName);
      } # if (figDev(...)) %>\resizebox{0.49\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}
      <%  } # for (ss ...) %>
    \end{center}
    \caption{(<%=region$src%>) 
      There are <%=tbl[1]%> loci of state <%=names(tbl)[1]%> ("negatives") and
      <%=tbl[2]%> loci of state <%=names(tbl)[2]%> ("positives"). 
      In total <%=tbl[3]%> loci within the safety margin were excluded.
    }
    \label{fig<%=figName%>}
    \end{figure}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    % END Figure
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 <%  } # for (kk ...) %>

<% verbose && exit(verbose); %>

\clearpage

\subsection{Evaluation}

%%%%%%%%%%%%
% fracB
%%%%%%%%%%%%

<% if (require(xtable)) { %>

<%
what <- "fracB";
fracBList <- getFracBList(fracBDsList, what=what);
keep <- grep(methodPattern, names(fracBList));
fracBList <- fracBList[keep];

## remove NAs
fracBList <- lapply(fracBList, function(fracB) {
  isNA <- is.na(getSignals(fracB))
  fracB <- extractSubset(fracB, whichVector(!isNA))
})

fracBList[["TCN"]] <- cn ## Add TCN

minNbPoints <- min(sapply(fracBList, function(fracB) table(getStates(fracB))))
fracBList <- lapply(fracBList, FUN=getBalancedRegions, minNbPoints)
%>

<%
caption <- sprintf("Test of the null hypothesis of equal distribution of %s before and after the breakpoint: Kolmogorov-Smirnov test statistic. The larger value, the more different the distributions are.", what)
testStat <- as.matrix(sapply(fracBList, FUN=test, testFUN=ks.test))
rownames(testStat) <- names(fracBList)
colnames(testStat) <- "ks"
display <- c("s", rep("fg", ncol(testStat)))
%>

\subsubsection{Test statistics: <%=what%>}

<%=print(xtable(testStat, caption=caption, display=display)) %>

Note that the number of loci in each state is constrained to be the same for all methods:

<%
caption <- "Number of loci in each state"
df <- t(sapply(fracBList, function(fracB) table(getStates(fracB), exclude=NULL)));
colnames(df) <- names(tbl);
colnames(df)[is.na(colnames(df))] <- "Safety Margin"
%>
<%=print(xtable(df, caption=caption)) %>

%%%%%%%%%%%%
% abs(fracB-1/2)
%%%%%%%%%%%%


<% ## setup
what <- "abs(fracB-1/2)";
fracBList <- getFracBList(fracBDsList, what=what);
keep <- grep(methodPattern, names(fracBList));
fracBList <- fracBList[keep];
fracB <- fracBList[[1]];
fracBList[["TCN"]] <- cn;
fracBList[["TCN"]]$unit <- fracBList[[1]]$unit;

fracBList <- sapply(genTags, function(genTag) {
  extractHeterozygous(fracBList, gcDsList[[genTag]], gcsDsList[[genTag]], confQuantile=confQuantile)
});
str(fracBList);

dn <- dimnames(fracBList)
nms <- sapply(dn[[2]], function(nm) sprintf("%s,%s", dn[[1]], nm))
nms <- as.character(nms)

cols <- c("black", "blue", "red", "green");
ltys <- c(4,1)
cols <- rep(cols[1:(dim(fracBList)[1])], times=dim(fracBList)[2]);
ltys <- rep(ltys, each=dim(fracBList)[1]);

labels <- strsplit(nms, split="\n");
labels <- sapply(labels, FUN=function(s) s[1]);
 
patts <- c("raw", sprintf("%s,%s", dn[[2]], dn[[2]]), "TCN")
keep <- unlist(sapply(patts, grep, nms))
##    keep <- seq(nms)
fracBList <- fracBList[keep]
names(fracBList) <- nms[keep]

cols <- cols[keep]
ltys <- ltys[keep]
labels <- labels[keep]
nms <- nms[keep]
%>

<% 
## Add TCN
fracBList[["TCN,SNP+CN"]] <- cn
snps <- whichVector(!is.na(fracB$y))
fracBList[["TCN,SNP"]] <- extractSubset(cn, snps)

minNbPoints <- min(sapply(fracBList, function(fracB) table(getStates(fracB))))
fracBList <- lapply(fracBList, FUN=getBalancedRegions, minNbPoints)

cols <- c(cols,  rep("darkgreen", 2))
ltys <- c(ltys,  2, 3)
nms <- names(fracBList)
labels <- c(labels, "TCN,SNP+CN", "TCN,SNP")
%>

\subsubsection{Test statistics: <%=what%>}

<%
testNames <- c("t", "ks")
testStat <- NULL
for (testName in testNames) {
  testFUN <- get(sprintf("%s.test", testName), mode="function");
  testStat <- rbind(testStat, sapply(fracBList, FUN=test, testFUN=testFUN))
}
colnames(testStat) <- names(fracBList)
rownames(testStat) <- testNames

caption <- sprintf("Significance of the breakpoint in the distributions of %s for heterozygous SNPs:Kolmogorov-Smirnov (equality of the distribution before and after the breakpoint) and Student (equal mean before and after the breakpoint) test statistics. The larger in absolute value, the more significant the breakpoint is.", what)
display <- c("s", rep("fg", nrow(testStat)))
%>

<%=print(xtable(t(testStat), caption=caption, display=display)) %>

Note that the number of loci in each state is constrained to be the same for all methods:

<%
caption <- "Number of loci in each state"
df <- t(sapply(fracBList, function(fracB) table(getStates(fracB), exclude=NULL)));
colnames(df) <- names(tbl);
colnames(df)[is.na(colnames(df))] <- "Safety Margin"
row.names(df) <- labels;
%>
<%=print(xtable(df, caption=caption)) %>

<% } %>

\subsubsection{ROC curves}
% We focus on heterozygous SNP as called by <%=genTag%>. 
Smoothing is done using the <%=binFFracB%> function.

<%
binWidths <- binCounts;
if (!byCount) {
  binWidths <- round(diff(xRange(fracBList[[1]]))/(nbrOfLoci(fracBList[[1]], na.rm=TRUE)-1)*binWidths)
}
%>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<%
  rocRows <- ceiling(length(binCounts)/rocCols); 
  aspect <- rocRows/rocCols;

  fracB <- fracBList[[1]];
  nbrOfLoci <- sum(is.finite(fracB$y), na.rm=TRUE);
  fullRes <- (diff(xRange(fracB))+1) / (nbrOfLoci-1);
  
   xRange <- range(sapply(fracBList, FUN=xRange));
   states <- na.omit(getUniqueStates(fracB));

%>

\begin{figure}[htb]
 \begin{center}
<%   for (ww in seq(along=binWidths)) {
       binWidth <- binWidths[ww];
      
       smtFUN <- function(fracB) {
           fracBS <- binnedSmoothingByState(fracB, from=xRange[1], to=xRange[2], by=binWidth, FUN=binFFracB, byCount=byCount);
         fracBS <- extractSubsetByState(fracBS, states=states);
         fracBS;
       }

       figName <- sprintf("%s,ROC,%s,binWidth=%s", region$label, robustStr,binWidth);
       if (fig <- figDev(figName, aspect=1)) {
         ##   layout(matrix(seq(along=binWidths), ncol=rocCols, byrow=TRUE));
         par(mar=c(2.5,2.4,1.3,0.7)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=2);
    
     if (binWidth > 0) {
       # Smooth FracBs using consecutive bins of given width (in kb)
       fracBSList <- lapply(fracBList, FUN=smtFUN) 
       dim(fracBSList) <- dim(fracBList)
        names(fracBSList) <- names(fracBList)

       if (byCount) {
         binLabel <- sprintf("Bin size: %g", binWidth);
       } else {
         binLabel <- sprintf("Bin width %g kb", binWidth/1e3);
      }
   } else {
      fracBSList <- fracBList;
      binLabel <- sprintf("Full resolution (%.1f kb, %s points)", fullRes/1e3, length(fracB$unit));
    }
    print(fracBSList);
  
    fits <- lapply(fracBSList, FUN=function(fracBS) {
      cat("Number of missing values: ", sum(is.na(getSignals(fracBS))), "\n", sep="");
      fitRoc(fracBS, states=states, recall=states[1]);
    });
    for (gg in grep("TCN", names(fracBList))) {
      if ((states[1]<2) && (states[2]>1)) { ## ie TCN(state[2]) <= TCNstate[1])
        fits[[gg]]$roc <- 1-fits[[gg]]$roc
      }
    }
    

  
   for (kk in seq(fits)) {
     first <- ((kk==1) && (ww==1))
     fit <- fits[[kk]]
     roc <- fit$roc;
     if (kk==1) {
       plot(roc, type="l", lwd=3, col=cols[kk], lty=ltys[kk], xlim=fpLim, ylim=sort(1-fpLim), xlab="False-positive rate", ylab="True-positive rate");
       abline(a=0, b=1, lty=3);
       stext(side=3, pos=1, binLabel);
     } else {
       lines(roc, lwd=3, col=cols[kk], lty=ltys[kk]);
     }
     if (addLegend && first) {
       legend("bottomright", col=cols, lwd=2, lty=ltys, labels, cex=0.8, bty="n");
     }
   } # for (kk ...)
   devDone(figName);
 } # if (figDev(...)) %> 
\resizebox{0.45\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}  <% } # for (ww ...) %>
\end{center}
 \caption{(<%=region$src%>) ROC curves for each of the <%=length(fracBDsList)%> preprocessing methods at the full resolution as well as <%=length(binWidths)-1%> different amounts of smoothing (using the <%=binFFracB%> function).  %Legend: raw (solid red), TBN-Birdseed (dashed blue) and TBN-NGC (solid light blue).
}
 \label{fig<%=figName%>}
\end{figure}

<% 
if (require(xtable)) {
  ltyLgds <- rep("solid", length(ltys))
  ltyLgds[ltys==2] <- "dashed"
  ltyLgds[ltys==3] <- "dotted"
  ltyLgds[ltys==4] <- "dash-dotted"
  
  lgd <- cbind(ltyLgds, cols)
  rownames(lgd) <- nms
  colnames(lgd) <- c("line type", "color")
  
  caption <- sprintf("Legend of Figure \\ref{fig%s}.", figName)
%>
<%=print(xtable(lgd, caption=caption)) %>
<% } %>


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


<% } # for (region in regions) %>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Regions of interest
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% References
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\bibliography{bioinformatics-journals-abbr,hb-at-maths.lth.se}
%\bibliographystyle{plain}
\bibliographystyle{natbib}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Session information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\appendix
\section{Data files}
\begin{Verbatim}[fontfamily=helvetica]
<%={x <- capture.output(print(fracBDsList));x <- gsub(": .*/(totalAndFracBData/)", ": \\1", x);paste(x, collapse="\n");}%>
\end{Verbatim}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Session information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Session information}
This report was automatically generated using the R.rsp package.
<%=toLatex(sessionInfo())%>


\end{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HISTORY:
% 2009-07-02
% o Added support for PNG output.
% 2009-07-01
% o Added (betaN, betaT) plots stratified by state showing lines that
% motivate the correction factor in TBN,v2.
% 2009-06-30
% o Fixed byCount=FALSE.
% o Constrained the number of points to be the same for comparisons at a given resolution.
% 2009-06-29
% o Removed TBN (v1) tracks and ROC curves.
% o Added several flavors of ROC curves for total copy numbers.
% 2009-06-23
% o Fixed number of loci and state legends in figure captions.
% o Added tables with results of 'ks.test' and 't.test' to the evaluation.
% 2009-06-22
% o Added ks.test()$stat to fracB tracks.
% o Now only one panel in each figure.
% o Nicer plots.
% 2009-06-15
% o Added (betaN, betaT) plots.
% 2009-06-13
% o Added a track for ASCN.
% 2009-06-11
% o Added a track for TCN.
% 2009-06-10
% o Added a track for fracB.
% 2009-06-08
% o Replaced 'cn' by 'fracB'. Updated text accordingly.
% 2009-04-09
% o Language updates after feedback from TS.
% 2009-02-23
% o Created.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
