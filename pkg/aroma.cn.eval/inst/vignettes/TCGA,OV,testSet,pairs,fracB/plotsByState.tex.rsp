%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Authors: Henrik Bengtsson, hb@stat.berkeley.edu
%          Pierre Neuvial, pierre@stat.berkeley.edu
% Created on: 2009-07-02
%
% Usage:
%  library("R.rsp");
%  rsptex("plotsByState.tex.rsp");  # => *.tex.rsp => ... => *.dvi
%  rsptex("plotsByState.tex.rsp", pdf=TRUE);  # => *.tex.rsp => ... => *.pdf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
<%
verbose && enter(verbose, "Setup");
sourceDirectory("R/");
what <- "fracB";

addLegend <- TRUE;
addSdEst <- FALSE;

figForce <- 1;

title <- sprintf("Plots before and after TumorBoost in regions with no ASCN change");
authors <- "HB, PN.";
verbose && exit(verbose);
%>

<%
pch <- 19; cex <- 0.5;
pch <- "."; cex <- 3;
colorMap <- c("*"="#000000", "NA"="#999999", "1"="red", "2"="orange", "3"="blue", "4"="purple");
smoothedColorMap <-  c("*" = "#000000", "NA" = "#999999");
homCol <- 2;
hetCol <- 1;
%>

%\documentclass[a4paper,draft]{article}
\documentclass[a4paper]{article}
\usepackage{graphicx}
\usepackage{fancyvrb}
\usepackage{a4wide}
\usepackage{xspace}
\usepackage{amsmath} 
\usepackage{natbib}

% The search path (within curly brackets and separated by commas)
% where to find graphics files
\graphicspath{{<%=figPath%>}}
\DeclareGraphicsRule{.eps.gz}{eps}{.eps.bb}{`gunzip -c #1}

\newcommand{\pkg}[1]{\textsl{#1}\xspace}

%\newcommand{\trackWidth}{<=trackWidth>\textwidth}


\title{<%=title%>}
\author{<%=authors%>}

\begin{document}

\maketitle

\section{Data set}

<%
df <- getFile(fracBDsList[[1]],1);
tumorName <- getName(df);
normalName <- sub("ref=","",getTags(df)[1]);
pairName <- paste(tumorName, normalName, sep=" / ");
%>
This report is based on the data set <%=dataSet%>. All data is based on the Affymetrix GenomeWideSNP\_6 chip type.  This evaluation will be based on $\rho$ estimated from one such pair, more precisely the <%=tumorName%> CEL file (tumor) and the <%=normalName%> CEL file (matched normal).

The two CEL files were preprocessed separately using CRMAv2 (without any reference arrays)

\subsection{List of change points}
For this data set, we have selected a few regions for which one safely can assume there exists a single changepoint and for which the fracB distribution looks constant.  This selection was done visually.  For each region we chose large enough safety margin such that the risk for the two sets $\mathcal{J}_A$ and $\mathcal{J}_B$ to contain loci from the other set is extremely small.  

\begin{table}[htp]
\begin{center}
\begin{tabular}{c|c|c|c|c}
Tumor-normal pair & Chromosome & Region & Change point & Safety region \\
\hline
<% for (region in regions) { %>
<%
region <- parseRegion(region);
str(region);
sample <- region$name;
sample <- pairName;
chr <- region$chromosome;
regionStr <- sprintf("%.2f", region$region/1e6);
cp <- region$params$cp[1];
cpStr <- sprintf("%.2f", cp);
delta <- region$params$cp[2];
deltaStr <- sprintf("%.2f", delta);
%>
<%=sample%> & <%=chr%> & <%=regionStr[1]%>-<%=regionStr[2]%> & <%=cpStr%> & <%=deltaStr%> \\
\hline
<% } # for (region ...) %>
\end{tabular}
\end{center}
\caption{Regions used for the evaluation and that each contain a single changepoint.  All positions and lengths are in units of Mb.}
\label{tblRegions}
\end{table}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Regions of interest
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<% for (region in regions) { %>
\clearpage
\section{Region: <%=region%>}

<%
print(region);
region <- parseRegion(region);
print(region);
%>


<%
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Count the number of loci with each state
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getNbLociPerState <- function(object) {
  states <- getStates(object);
  tbl <- table(states, exclude=NULL);
  uniqueStates <- as.integer(names(tbl));
  o <- order(abs(uniqueStates));
  tbl <- tbl[o];
  names <- names(tbl);
  sign <- as.integer(names);
  names[sign==0] <- "NORMAL (1,1)";
  names[sign==1] <- "GAIN (1,2)";
  names[sign==2] <- "DELETION (0,1)";
  names[sign==3] <- "COPY NEUTRAL LOH (0,2)";
  names(tbl) <- names;
  tbl
}
%>


\subsection{$(\beta_N, \beta_T)$ plots}
<%
verbose && enter(verbose, "Plotting (beta_N, beta_T)")
what <- "fracB"
fracBList <- getFracBList(fracBDsList, what=what, pattern=methodPattern, force=(figForce > 2));

fracBN <- getFracBList(list(dsN), what=what, force=(figForce > 2))[[1]];
betaN <- getSignals(fracBN);

print(fracBList);
nbrOfSources <- length(fracBList);
%>

<%
 xScale <- 1e-6;
 cp <- region$params$cp;
  s <- region$params$s;
 
  xlab <- expression(beta[N] == theta[B,N]/theta[N]);
  ylab <- expression(beta[T] == theta[B,T]/theta[T]);
  xlab <- expression(beta[N]);
  ylab <- expression(beta[T]);
  lim <- c(-0.1,1.1);

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Plot $(\beta_N, \beta_T)$
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

%>

<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

<%  for (kk in seq(along=fracBList)) { %>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% BEGIN Figure: (betaN, betaT) for each state separately: <%=names(fracBList)[kk]%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\begin{figure}[htb]
  \begin{center}
<%
    name <- names(fracBList)[kk];
    fracB <- fracBList[[kk]];
    ustates <- na.omit(getUniqueStates(fracB));
    for (ss in seq(along=ustates)) {
      fracBState <- extractSubsetByState(fracB, state=ustates[ss]);
      fracBNState <- extractSubsetByState(fracBN, state=ustates[ss]);
      betaN <- getSignals(fracBNState)

      betaT <- getSignals(fracBState);

      ## genotype calls
      genName <- unlist(strsplit(name, ","))
      genName <- genName[length(genName)]
      gTag <- ifelse(genName=="raw", genTag, genName);
     gcN <- gcDsList[[gTag]]
      idx <- indexOf(gcN, region$name);
      gf <- getFile(gcN, idx);
      isHet <- isHeterozygous(gf, units=fracBNState$unit, drop=TRUE);
      
      col <- rep(homCol, length(isHet));
      col[isHet] <-hetCol;

      figName <- sprintf("%s,betaNvsBetaT,%s,%s,%s,state=%s", region$label, what, name, gTag, ustates[ss]);
      if (fig <- figDev(figName)) {
        par(mar=c(2.7,2.6,1.2,0)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=cex);
        plot(NA, xlim=lim, ylim=lim, xlab=xlab, ylab=ylab, axes=FALSE);
        axis(side=1, at=c(0,1/2,1));
        axis(side=2, at=c(0,1/2,1));
##        box();  # optional?

        if (addDiagHorizLines) {	
          as <- seq(-1.5, 1.5, by=.1);
          b <- ifelse(name == "raw", 1, 0);
          la <- lapply(as, function(x) abline(a=x, b=b, col="#999999", lty=1, lwd=1));
	}

        ## boxes
        z <- 0:2/2;
        a <- rep(min(z), length(z));
        b <- rep(max(z), length(z));
        segments(a, z, b, z, col="#999999", lty=2);
        segments(z, a, z, b, col="#999999", lty=2);

        points(betaN, betaT, pch=pch, col=col, cex=cex);

        if ((addTrueBetaLines) && (name =="raw")) {
          ## slope: exploiting symmetries...
          slopeDatAbove <- betaT/betaN;
          slopeDatBelow <- (1-betaT)/(1-betaN);
          slopeDat <- slopeDatAbove;
          slopeDat[which(slopeDat>1)] <- slopeDatBelow[which(slopeDat>1)];
          
          hetSlope <- median(slopeDat[isHet], na.rm=TRUE);
          
          abline(a=0, b=1, lty=2, lwd=2, col="#999999");
          x0 <- rep(0, 2);
          x1 <- rep(1, 2);
          y0 <- c(0, 1-hetSlope);
          y1 <- c(hetSlope, 1);
          segments(x0, y0, x1, y1, lty=1, lwd=6, col="white");
          segments(x0, y0, x1, y1, lty=1, lwd=4, col=hetCol);
        }
        
##         if ((addLinearRegressionLines) && (name =="raw")) {
        if ((addLinearRegressionLines)) {
          
          if (name =="raw") {
            isBelow <- (betaT < betaN);
          } else {
            isBelow <- (betaT<1/2);
         };
          wBelow <- whichVector(isHet & isBelow);
          wAbove <- whichVector(isHet & !isBelow);
          xxBelow <- c(betaN[wBelow], 1-betaN[wAbove]);
          yyBelow <- c(betaT[wBelow], 1-betaT[wAbove]);
          xxAbove <- 1-xxBelow;
          yyAbove <- 1-yyBelow;
        
          lmBelow <- lm(betaT[wBelow]~betaN[wBelow]);
          lmAbove <- lm(betaT[wAbove]~betaN[wAbove]);

          if (require(MASS)) {
            ##           lmBelow <- rlm(betaT[wBelow]~betaN[wBelow], weights=abs(betaN[wBelow]-1/2));
            ##           lmBelow <- rlm(betaT[wBelow]~betaN[wBelow]);
            lmBelow <- rlm(yyBelow~xxBelow);
            ##           lmAbove <- rlm(betaT[wAbove]~betaN[wAbove], weights=abs(betaN[wAbove]-1/2));
            ##           lmAbove <- rlm(betaT[wAbove]~betaN[wAbove]);
            lmAbove <- rlm(yyAbove~xxAbove);
          }

          xb <- 1/2;
          abline(lmBelow, lwd=9, col="white");
          abline(lmBelow, lwd=6, col=hetCol, lty=1);
          coef <- lmBelow$coefficients
          yb <- coef[1]+xb*coef[2];
          points(xb, yb, col="white", cex=2.6, pch=20);
          points(xb, yb, col=hetCol, cex=2, pch=20);
          abline(lmAbove, lwd=9, col="white");
          abline(lmAbove, lwd=6, col=hetCol, lty=1);
          coef <- lmAbove$coefficients
          yb <- coef[1]+xb*coef[2];
         points(xb, yb, col="white", cex=2.6, pch=20);
         points(xb, yb, col=hetCol, cex=2, pch=20);
         points(xb, yb, col=hetCol, cex=2, pch=1);
       }
        
       txt <- sprintf("%s,%s", name, gTag);
        nm <- names(tbl)[ss];
        stext(side=4, pos=0, line=-0.8, cex=cex, txt, col="#999999");
        stext(side=3, pos=0, line=-0.3, cex=cex, nm);

        if (addTrueBetaPoints) {         ## add points for true allele B fractions
         for (kk in seq(along=kappasPbs)) {
            kappa <- kappasPbs[kk];
            tbc <- (3:5)[kk];
            tbCex <- c(2, 1.5, 1)[kk];
            points(0,0, col=tbc, cex=tbCex, pch=20);
            points(1,1, col=tbc, cex=tbCex, pch=20);
            trueBeta <- switch(nm,
              "NORMAL (1,1)" = 1/2,
              "GAIN (1,2)" = (1*kappa+(1-kappa))/(3*kappa+2*(1-kappa)),
              "DELETION (0,1)" = (1-kappa)/(kappa+2*(1-kappa)),
              "COPY NEUTRAL LOH (0,2)" = (1-kappa)/2);
            points(1/2, trueBeta, col=tbc, cex=tbCex, pch=20)
            points(1/2, 1-trueBeta, col=tbc, cex=tbCex, pch=20)
          }
        }
        devDone(figName);
      } # if (figDev(...)) %>\resizebox{0.49\textwidth}{!}{\includegraphics{<%=figPath%>/<%=fig$fullname%>}}
      <%  } # for (ss ...) %>
    \end{center}
    \caption{<%=txt%>.}
   \label{fig<%=figName%>}
    \end{figure}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    % END Figure
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

<%         if (name =="raw") { %>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% BEGIN Figure: (betaN, betaT) for each state separately: <%=names(fracBList)[kk]%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\begin{figure}[htb]
  \begin{center}
<%
    name <- names(fracBList)[kk];
    fracB <- fracBList[[kk]];
    ustates <- na.omit(getUniqueStates(fracB));
    for (ss in seq(along=ustates)) {
      fracBState <- extractSubsetByState(fracB, state=ustates[ss]);
      fracBNState <- extractSubsetByState(fracBN, state=ustates[ss]);
      betaN <- getSignals(fracBNState)

      betaT <- getSignals(fracBState);

      ## genotype calls
      genName <- unlist(strsplit(name, ","))
      genName <- genName[length(genName)]
      gTag <- ifelse(genName=="raw", genTag, genName);
      gcN <- gcDsList[[gTag]]
      idx <- indexOf(gcN, region$name);
      gf <- getFile(gcN, idx);
      isHet <- isHeterozygous(gf, units=fracBNState$unit, drop=TRUE);
      
      col <- rep(homCol, length(isHet));
      col[isHet] <-hetCol;

      isBelowDiagonal <- (betaT<betaN);
      xx <- median(betaN[isBelowDiagonal & isHet], na.rm=TRUE);
      yy <- median(betaT[isBelowDiagonal & isHet], na.rm=TRUE);

      figName <- sprintf("%s,betaNvsBetaT,%s,%s,%s,smoothScatter,state=%s", region$label, what, name, gTag, ustates[ss]);
      if (fig <- figDev(figName)) {
        par(mar=c(2.7,2.6,1.2,0)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=cex);
        smoothScatter(betaN, betaT, xlim=lim, ylim=lim, xlab=xlab, ylab=ylab, axes=FALSE)
       axis(side=1, at=c(0,1/2,1));
        axis(side=2, at=c(0,1/2,1));
##        box();  # optional?

        abline(a=0, b=yy/xx)
        abline(v=xx)
        abline(v=.5)
        abline(h=yy)
        abline(h=yy/xx*.5)

        txt <- sprintf("%s,%s --- smoothScatter version", name, gTag);
        stext(side=4, pos=0, line=-0.8, cex=cex, txt, col="#999999");
        stext(side=3, pos=0, line=-0.3, cex=cex, names(tbl)[ss]);
        devDone(figName);
      } # if (figDev(...)) %>\resizebox{0.49\textwidth}{!}{\includegraphics{<%=figPath%>/<%=fig$fullname%>}}
      <%  } # for (ss ...) %>
    \end{center}
    \caption{<%=txt%>.}
   \label{fig<%=figName%>}
    \end{figure}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    % END Figure
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
      <%  } # if (name ... %>
 <%  } # for (kk ...) %>

<% verbose && exit(verbose); %>

\clearpage

\subsection{Allele-specific copy number estimates}
<%
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Plot ASCNs
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
verbose && enter(verbose, "Plotting (C_A,C_B)")
what <- "ratios";

xlab <- expression(C["TA"] == theta["TA"]/theta[N]);
ylab <- expression(C["TB"] == theta["TB"]/theta[N]);
xlab <- expression(C["TA"]);
ylab <- expression(C["TB"]);
lim <- c(-0.5,4.5);

# Extract total CNs 
cnList <- getCnList(cnDsList, what=what, force=(figForce > 2));
cn <- cnList[[1]];
print(cn);
C <- getSignals(cn);
col <- getStateColors(cn, na.rm=TRUE);

fracBList <- getFracBList(fracBDsList, what="fracB", pattern=methodPattern, force=(figForce > 2));
print(fracBList);
nbrOfSources <- length(fracBList);

  xScale <- 1e-6;
  states <- na.omit(sort(getUniqueStates(fracBList[[1]])));
  cp <- region$params$cp;
  s <- region$params$s;
%>

<%
tbl <- sapply(fracBList, getNbLociPerState)
stopifnot(all(rowSds(tbl)==0))
tbl <- tbl[, 1]
%>

<%  for (kk in seq(along=fracBList)) { %>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% BEGIN Figure: (C_A, C_B) for each state separately: <%=names(fracBList)[kk]%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\begin{figure}[htb]
  \begin{center}
<%
    name <- names(fracBList)[kk];
    fracB <- fracBList[[kk]];
    ustates <- na.omit(getUniqueStates(fracB));
    for (ss in seq(along=ustates)) {
      state <- ustates[ss];
      cnState <- extractSubsetByState(cn, state=state);
      fracBState <- extractSubsetByState(fracB, state=state);
      fracBNState <- extractSubsetByState(fracBN, state=state);

      C <- getSignals(cnState);
      beta <- getSignals(fracBState);
      # Sanity check
      stopifnot(length(beta) == length(C));

      CA <- (1-beta) * C;
      CB <- beta * C;
 
      ## genotype calls
      genName <- unlist(strsplit(name, ","))
      genName <- genName[length(genName)]
      gTag <- ifelse(genName=="raw", genTag, genName);
      gcN <- gcDsList[[gTag]]
      idx <- indexOf(gcN, region$name);
      gf <- getFile(gcN, idx);
      isHet <- isHeterozygous(gf, units=fracBNState$unit, drop=TRUE);
      
      col <- rep(homCol, length(isHet));
      col[isHet] <-hetCol;

      figName <- sprintf("%s,ASCN,%s,%s,%s,state=%s", region$label, what, name, gTag, state);
      if (fig <- figDev(figName)) {
        par(mar=c(2.7,2.6,1.2,0)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=cex);
        plot(NA, col=col, xlim=lim, ylim=lim, xlab=xlab, ylab=ylab);
        for (c in 2) lines(x=c(0,c), y=c(c,0), lty=1, lwd=2, col="#999999");
        ## boxes
        rLim <- c(floor(lim[1]), ceiling(lim[2]));
        z <- seq(from=rLim[1], to=rLim[2]);
        a <- rep(min(z), length(z));
        b <- rep(max(z), length(z));
        segments(a, z, b, z, col="#999999", lty=2);
        segments(z, a, z, b, col="#999999", lty=2);

        txt <- sprintf("%s,%s", name, gTag);
        stext(side=4, pos=0, line=-0.8, cex=cex, txt, col="#999999");
        stext(side=3, pos=1, line=-0.3, cex=cex, names(tbl)[ss]);
        points(CA, CB, col=col, pch=pch, cex=cex);
        devDone(figName);
      } # if (figDev(...)) %>\resizebox{0.49\textwidth}{!}{\includegraphics{<%=figPath%>/<%=fig$fullname%>}}
 <% } # for (ss ...) %>
    \end{center}
    \caption{<%=txt%>.}
      \label{fig<%=figName%>}
    \end{figure}
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    % END Figure
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 <%  } # for (kk ...) %>

<% verbose && exit(verbose); %>

\clearpage

\subsection{Density plots}
<%
verbose && enter(verbose, "Plotting densities");
what <- "fracB";
fracBList <- getFracBList(fracBDsList, what=what, pattern=methodPattern, force=(figForce > 2));
# Sanity check
stopifnot(length(fracBList) %in% c(2,3));   # raw, Birdseed*, NGC
ustates <- na.omit(getUniqueStates(fracBList[[1]]));
%>

<%
tbl <- sapply(fracBList, FUN=getNbLociPerState);
stopifnot(all(rowSds(tbl)==0));
tbl <- tbl[, 1];
%>

<%
xlab <- expression(beta[T]);
lim <- c(-0.1,1.1);
%>

<%
xlim <- c(-0.2,1.2);
platform <- getPlatform(fracBDsList[[1]]);
if (platform == "Affymetrix") {
  adjust <- 0.5; ylim <- c(0,3.2);
  adjust <- 0.3; ylim <- c(0,4.0);
} else if (platform == "Illumina") {
  adjust <- 0.3; ylim <- c(0,6.0);
}
for (ss in seq(along=ustates)) {
  ustates <- na.omit(getUniqueStates(fracB));
  figName <- sprintf("%s,%s,density,state=%s", region$label, what, ustates[ss]);
  fracBStateList <- lapply(fracBList, FUN=extractSubsetByState, ustates[ss]);
  betaT <- sapply(fracBStateList, FUN=getSignals);
%>


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% BEGIN Figure: betaT densities for state <%=ustates[ss]%>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\begin{figure}[htb]
  \begin{center}
    <% 
    if (fig <- figDev(figName, aspect=0.4)) {
      par(mar=c(2.7,0.2,1.2,0.2)+0.1, mgp=c(1.4,0.3,0), tcl=-0.3, cex=cex);
      plotDensity(betaT, col=c("#999999", "#999999", "#000000"), lty=c(3,1,1), lwd=6, adjust=adjust, xlim=xlim, ylim=ylim, xlab=xlab, ylab=NULL, axes=FALSE);
      axis(side=1, labels=FALSE, col.ticks=NA);
      axis(side=1, at=c(0,1/2,1));
      stext(side=3, pos=0.5, line=0, margin=c(0.2,0), cex=cex, names(tbl)[ss]);
      devDone(figName);
    } # if (figDev(...)) 
    %>\resizebox{0.49\textwidth}{!}{\includegraphics{<%=figPath%>/<%=fig$fullname%>}}
  \end{center}
  \caption{Density of raw (dashed lines) and TumorBoost-normalized (solid lines) allele B fractions.}
  \label{fig<%=figName%>}
  \end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
<%  } # for (ss ...) %>

<% verbose && exit(verbose); %>

<% } # for (region in regions) %>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Regions of interest
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% References
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\clearpage
%\bibliography{bioinformatics-journals-abbr,hb-at-maths.lth.se}
%\bibliographystyle{plain}
%\bibliographystyle{natbib}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Session information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\appendix
\section{Data files}
\begin{Verbatim}[fontfamily=helvetica]
<%={x <- capture.output(print(fracBDsList));x <- gsub(": .*/(totalAndFracBData/)", ": \\1", x);paste(x, collapse="\n");}%>
\end{Verbatim}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Session information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Session information}
This report was automatically generated using the R.rsp package.
<%=toLatex(sessionInfo())%>


\end{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HISTORY:
% 2009-09-06
% o Updated to work with Illumina too.
% 2009-07-03
% o Added density plots.
% 2009-07-02
% o Added ASCN plots.
% o Created from main.tex.rsp.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
