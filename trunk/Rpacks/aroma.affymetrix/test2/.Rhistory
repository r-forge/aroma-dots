source("hbCEU.Rex")
source("hbCEU.Rex")
source("../init.R")
source("../test/init.R")
createFrom
methods("createFrom"0
methods("createFrom")
cs
cf <- getFile(cs, 1)
cs
cfA <- createFrom(cf, filename="foo.cel", verbose=verbose)
source("../test/init.R")
cfA <- createFrom(cf, filename="bar.cel", method="create", verbose=verbose)
source("../test/init.R")
cfA <- createFrom(cf, filename="bar.cel", method="create", verbose=verbose)
source("../test/init.R")
cfA <- createFrom(cf, filename="bar.cel", method="create", verbose=verbose)
cfA <- createFrom(cf, filename="bar.cel", method="create", verbose=verbose)
cfB <- createFrom(cf, filename="bar.cel", method="create", verbose=verbose)
source("../test/init.R")
cfB <- createFrom(cf, filename="bar.cel", method="create", verbose=verbose)
cfA <- createFrom(cf, filename="foo.cel", verbose=verbose)
cfA
cfB
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
getHeader(cfA)
getHeader(cfB)
source("../test/init.R")
source("hbCEU.Rex")
source("hbCEU.Rex")
source("hbCEU.Rex")
source("hbCEU.Rex")
source("hbCEU.Rex")
subset
subset
source("hbCEU.Rex")
gc()
source("hbCEU.Rex")
gc()
source("hbCEU.Rex")
source("hbCEU.Rex")
source("hbCEU.Rex")
cdf
cdf <- getCdf(cesN)
gi <- getGenomeInformation(cdf)
units <- getUnitsOnChromosome(gi, 23)
theta <- extractMatrix(cesN, units, verbose=verbose)
theta <- extractMatrix(cesN, units=units, verbose=verbose)
savehistory()
library(aroma.affymetrix)
attach(loadObject("Affymetrix_2006-HapMap270.CEU.founders,ACC,QN,MBEI,A+B,FLN.RData")
)
attach(loadObject("Affymetrix_2006-HapMap270.CEU.founders,dChip,QN,MBEI,A+B.RData"))
rA1 <- loadObject("Affymetrix_2006-HapMap270.CEU.founders,ACC,QN,MBEI,A+B,FLN.RData")
rA2 <- loadObject("Affymetrix_2006-HapMap270.CEU.founders,QN,RMA,A+B,FLN.RData")
rB1 <- loadObject("Affymetrix_2006-HapMap270.CEU.founders,dChip,QN,MBEI,A+B.RData")
r <- rA1; M <- log2(r$theta/r$thetaR); A <- log2(r$theta*r$thetaR)/2;
r <- rA1; r$M <- log2(r$theta/r$thetaR); r$A <- log2(r$theta*r$thetaR)/2; rA1 <- r;
r <- rA2; r$M <- log2(r$theta/r$thetaR); r$A <- log2(r$theta*r$thetaR)/2; rA2 <- r;
r <- rB1; r$M <- log2(r$theta/r$thetaR); r$A <- log2(r$theta*r$thetaR)/2; rB1 <- r;
plot(rA1$A, rA1$M, pch=".")
plot(rA2$A, rA2$M, pch=".")
r <- rA1; r$fit <- rocdemo.sca(truth, M[,1:2]); rA1 <- r;
library(ROC)
attach(loadObject("etc.RData"))
r <- rA1; r$fit <- rocdemo.sca(truth[,cc], M[,cc]); rA1 <- r;
cc <- 1:2
r <- rA1; r$fit <- rocdemo.sca(truth[,cc], M[,cc]); rA1 <- r;
r <- rA1; r$fit <- rocdemo.sca(truth[,cc], r$M[,cc]); rA1 <- r;
r <- rA1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA1 <- r;
r <- rA2; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA2 <- r;
r <- rB1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rB1 <- r;
plot(rA1$fit, line=TRUE, lwd=2, col="red")
plot(rA2$fit, line=TRUE, lwd=2, col="orange", add=TRUE)
plot(rB1$fit, line=TRUE, lwd=2, col="blue", add=TRUE)
#r <- rA1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA1 <- r; r <- rA2; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA2 <- r; r <- rB1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rB1 <- r;
cc <- 3:4
r <- rA1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA1 <- r; r <- rA2; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA2 <- r; r <- rB1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rB1 <- r;
x11(); plot(rA1$fit, line=TRUE, lwd=2, col="red"); plot(rA2$fit, line=TRUE, lwd=2, col="orange", add=TRUE); plot(rB1$fit, line=TRUE, lwd=2, col="blue", add=TRUE)
cc <- 5:6
r <- rA1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA1 <- r; r <- rA2; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA2 <- r; r <- rB1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rB1 <- r;
cc <- 10:12
r <- rA1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA1 <- r; r <- rA2; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA2 <- r; r <- rB1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rB1 <- r;
cc <- 12:13
r <- rA1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA1 <- r; r <- rA2; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rA2 <- r; r <- rB1; M <- r$M[,cc]; ok <- apply(M, 1, function(x) all(is.finite(x))); r$fit <- rocdemo.sca(truth[ok,cc], M[ok,]); rB1 <- r;
x11(); plot(rA1$fit, line=TRUE, lwd=2, col="red"); plot(rA2$fit, line=TRUE, lwd=2, col="orange", add=TRUE); plot(rB1$fit, line=TRUE, lwd=2, col="blue", add=TRUE)
savehistory()
order
source("roc.Rex")
str(truth)
str(ok)
source("roc.Rex")
str(ok)
source("roc.Rex")
source("roc.Rex")
summaru(truth[ok,cc])
summary(truth[ok,cc])
summary(r0$M[ok,cc])
source("roc.Rex")
source("roc.Rex")
str(ok)
str(which(ok))
source("roc.Rex")
#source("roc.Rex")
legend("bottomright", pch=19, col=seq(along=r), legend=seq(along=r));
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
thruth[1,]
truth[1,]
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
traceback()
unique(truth[,cc])
str(truth)
str(cc)
source("roc.Rex")
x11()
source("roc.Rex")
x11(); source("roc.Rex")
gc()
str(which(ok))
str(r0$M[,cc])
str(r0$M[,cc][,1])
str(r0$M[,cc][,2])
str(r0$M[,cc][,3])
str(r0$M[,cc][,4])
str(r0$M[,cc][,5])
source("roc.Rex")
x11(); source("roc.Rex")
x11(); source("roc.Rex")
x11(); source("roc.Rex")
x11(); source("roc.Rex")
ll()
ls()
Rterm
save.image()
source("roc.Rex")
rm(r)
source("roc.Rex")
source("roc.Rex")
gc()
str(truth)
isMale <- (truth[1,] == 1);
isMale
source("roc.Rex")
ff
femails
females
males
source("roc.Rex")
library(R.graphics)
source("roc.Rex")
graphics.off()
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
cdf
cdf <- AffymetrixCdfFile$fromChipType("Mapping250K_Nsp")
gs <- getUnitSizes(cdf)
gs <- getUnitSizes(cdf, units=1:100)
str(gs)
gs
gs <- getUnitSizes(cdf)
gs
units
gs <- getUnitSizes(cdf, units=units)
gs
unique(gs)
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
x11(); source("roc.Rex")
colnames(truth)
ls
ls()
str(r)
colnames(r$theta)[males]
colnames(r$theta)
colnames(r[[1]]$theta)
colnames(r[[1]]$theta)[males]
colnames(r[[1]]$theta)[males[1]]
colnames(r[[1]]$theta)[males[2]]
colnames(r[[1]]$theta)[males[3]]
x11(); source("roc.Rex")
source("roc.Rex")
length(females)
gc()
source("roc.Rex")
source("roc.Rex")
str(males)
colnames(r[[1]]$theta)[males[mm]]
mm <- 4
colnames(r[[1]]$theta)[males[mm]]
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("hbCEU.Rex")
gc()
  cdf <- getCdf(cs);
  gi <- getGenomeInformation(cdf);
  units <- getUnitsOnChromosome(gi, 23);
cs
cs <- getInputDataSet(qn)
  rm(cs);
cs <- getInputDataSet(qn)
  cdf <- getCdf(cs);
  gi <- getGenomeInformation(cdf);
  units <- getUnitsOnChromosome(gi, 23);
  fit(plm, units=units, ram=4, verbose=verbose);
  merger <- ChipEffectGroupMerge(ces);
ces <- getChipEffectSet(plm)
  merger <- ChipEffectGroupMerge(ces);
merger
merger
process(merger, verbose=verbose)
setMergeFunction(merger, function(x) { 2^colMeans(log2(x)) } )
setMergeFunction(merger, function(x) { x[1,] <- 2^colMeans(log2(x)); x[-1,] <- 0; x } )
process(merger, verbose=verbose)
getMessage
?getMessage
methods("getMessage")
source("../test/init.R")
source("hbCEU.Rex")
merger
  setMergeFunction(merger, function(x) { 
    x[1,] <- 2^colMeans(log2(x), na.rm=TRUE); 
    x[-1,] <- 0;
    x;
})
  cesM <- process(merger, verbose=verbose);
source("../test/init.R")
source("roc.Rex")
source("roc.Rex")
rm(r)
source("roc.Rex")
library(R.graphics)
source("roc.Rex")
?legend
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
female[4]
females[4]
males[2]
r0 <- r[[2]]
theta <- r0$theta
X <- r0$theta[,c(3,8)]
Xn <- normalizeAffine(X)
plotMvA
plotMvsA
x11(); plotMvsA(X)
plotMvsA(X, xlim=c(5,14))
plotMvsA(X, Alim=c(5,14))
plotMvsA(X, Alim=c(6,13))
plotMvsA(Xn, col="red", add=TRUE)
      X <- r0$theta[,cc];
      Xr <- r0$thetaR;
      Xn <- normalizeAffine(X);
      M <- log2(Xn/Xr);
str(Xr)
str(M)
dev.set(3); source("roc.Rex")
str(M)
dev.set(3); source("roc.Rex")
dev.set(3); source("roc.Rex")
      M <- r0$M[,cc];
        Xr <- r0$thetaR;
        X <- r0$theta[,cc];
        Xn1 <- normalizeAffine(cbind(X[,1],Xr));
        Xn2 <- normalizeAffine(cbind(X[,2],Xr));
        Xn <- cbind(Xn1, Xn2);
str(Xn)
str(X)
        M <- log2(Xn/Xr);
str(M)
M0 <- r0$M[,cc];
str(M0)
str(Xn)
str(Xn1)
dev.set(3); source("roc.Rex")
kk <- 2
      r0 <- r[[kk]];
      M <- r0$M[,cc];
str(M);
A <- r0$M[,cc]
plot(A[,1],M[,1])
A <- r0$A[,cc]
plot(A[,1],M[,1])
plot(A[,2],M[,2])
        Xr <- r0$thetaR;
        X <- r0$theta[,cc];
        Xn1 <- normalizeAffine(cbind(X[,1],Xr));
        Xn2 <- normalizeAffine(cbind(X[,2],Xr));
        Xn1 <- normalizeAffine(cbind(X[,1],Xr));        Xn <- cbind(Xn1[,1], Xn2[,1]);
        Xr <- rowMeans(cbind(Xn1[,2], Xn2[,2]));
        Xr <- r0$thetaR;
        Xrn <- rowMeans(cbind(Xn1[,2], Xn2[,2]));
plot(Xr, Xrn)
plot(X[,1], Xn[,1])
plot(X[,2], Xn[,2])
        M <- log2(Xn/Xrn);
summary(M)
 M0 <- r0$M[,cc]; 
summary(M0)
      ok <- apply(M, MARGIN=1, function(x) all(is.finite(x)));
sum(ok)
      ok[!isGG] <- FALSE;
sum(ok)
      fit <- rocdemo.sca(as.vector(truth[ok,cc]), as.vector(M[ok,]));
plot(fit, line=TRUE)
dev.set(3); source("roc.Rex")
normalizeAfffine
normalizeAffine
normalizeAffine?
2
normalizeAffine.matrix
dev.set(3); source("roc.Rex")
dev.set(3); source("roc.Rex")
dev.set(3); source("roc.Rex")
dev.set(3); source("roc.Rex")
str(r)
str(r0)
dev.set(3); source("roc.Rex")
str(r0)
str(r0$theta)
?calibrateMultiscan.matrix
dev.set(3); source("roc.Rex")
dev.set(3); source("roc.Rex")
