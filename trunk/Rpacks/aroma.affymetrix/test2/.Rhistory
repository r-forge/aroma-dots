    imgName <- sprintf("ROC,optimal,TPdistribution,fpRate%.4f", fpRate);
    imgName <- gsub("[.]", "_", imgName);
    filename <- sprintf("%s.%s", imgName, imgFormat);
    eps(filename, width=6, height=0.618*6);
    par(mar=c(4,5,1,1)+0.1);
    par(cex=0.7, mgp=c(2.7,0.7,0));
  } else if (imgFormat == "screen") {
    par(mar=c(5,5,2,1)+0.1);
    par(cex=1, mgp=c(2.5,0.2,0));
  }
  xlab <- "TP rates (%)";
  plotDensity(100*D, from=0, to=100, xlab=xlab);
  stext(side=4, pos=0, sprintf("FP rates %.2f%%", 100*fpRate), cex=0.7);
  legend("topleft", legend=colnames(D), col=1:4, pch=19);
  if (imgFormat == "eps") {
    dev.off();
  }
  if (imgFormat == "eps") {
    imgName <- sprintf("ROC,optimal,TPcdf,fpRate%.4f", fpRate);
    imgName <- gsub("[.]", "_", imgName);
    filename <- sprintf("%s.%s", imgName, imgFormat);
    eps(filename, width=6, height=0.618*6);
    par(mar=c(4,5,1,1)+0.1);
    par(cex=0.7, mgp=c(2.7,0.7,0));
  } else if (imgFormat == "screen") {
    par(mar=c(5,5,2,1)+0.1);
    par(cex=1, mgp=c(2.5,0.2,0));
  }
  plotCumulativeDensity(100*D, spar=0.5, xlab=xlab)
  stext(side=4, pos=0, sprintf("FP rates %.2f%%", 100*fpRate), cex=0.7);
  legend("topleft", legend=colnames(D), col=1:4, pch=19);
  if (imgFormat == "eps") {
    dev.off();
  }
} # for (fpRate ...)
  plotCumulativeDensity(100*D, spar=0.5, xlab=xlabTp)
  xlabTp <- "TP rates (%)";
  plotCumulativeDensity(100*D, spar=0.5, xlab=xlabTp)
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab=xlabTp)
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="(1-TP) rates (%)", axes=FALSE)
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="(1-TP) rates (%)", axis=FALSE)
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="(1-TP) rates (%0")
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="(1-TP) rates (%)")
fpRate <- 1/30
  filename <- sprintf("TPatFP%.5f.RData", fpRate);
  pathname <- filename;
  print(pathname);
    D <- loadObject(pathname);
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="(1-TP) rates (%)")
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="TN rates (%)")
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="TN rates (%)")
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="FP rates (%)")
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="TP rates (%)")
at <- seq(0,100,by=20)
axis(side=1, at=at, label=100-at)
source("plotCumulativeDensity.list.R"); 
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="TP rates (%)", axes=FALSE)
axis(side=1, at=at, label=100-at)
axis(side=3)
axis(side=2)
box()
  plotCumulativeDensity(100*(1-D), spar=0.5, xlab="TP rates (%)", axes=FALSE)
box()
axis(side=2)
axis(side=1, at=at, label=100-at)
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
sets2 <- lapply(sets, FUN=function(set) {
  M <- set$M;
  Mr <- apply(M[,females], MARGIN=1, FUN=median, na.rm=TRUE);
  M <- M - Mr;
  set$M <- M;
  set;
})
names(sets)
if (!exists("sets2", list="mode") || !identical(names(sets2), names(sets))) {
  sets2 <- lapply(sets, FUN=function(set) {
    M <- set$M;
    Mr <- apply(M[,females], MARGIN=1, FUN=median, na.rm=TRUE);
    M <- M - Mr;
    set$M <- M;
    set;
  })
}
if (!exists("sets2", mode="list") || !identical(names(sets2), names(sets))) {
  sets2 <- lapply(sets, FUN=function(set) {
    M <- set$M;
    Mr <- apply(M[,females], MARGIN=1, FUN=median, na.rm=TRUE);
    M <- M - Mr;
    set$M <- M;
    set;
  })
}
dev.set(5)
source("roc.Rex")
source("roc.Rex")
source("roc.Rex")
jj
source("roc.Rex")
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
  fpRate <- 1*fpStep;
    filename <- sprintf("TPatFP%.5f.RData", fpRate);
    pathname <- filename;
    print(pathname);
      D <- loadObject(pathname);
Dm <- rowMedians(D, na.rm=TRUE)
Dm <- rowMedians.matrix(D, na.rm=TRUE)
Dm
summary(Dm)
which(Dm == 0)
dev.off(); source("roc.Rex")
fpRate <- 3*fpStep
    filename <- sprintf("TPatFP%.5f.RData", fpRate);
pathname <- sprintf("TPatFP%.5f.RData", fpRate);
      D <- loadObject(pathname);
Dm <- rowMedians.matrix(D, na.rm=TRUE)
which(Dm == 0)
dev.off(); source("roc.Rex")
xlab
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
str(roc)
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
jj00 <- which(Dm == 0);Dm <- rowMedians.matrix(D, na.rm=TRUE)
# A SNP with 80% TP rate
jj80 <- which(Dm >= 0.80);
# A SNP with 95% TP rate
jj999 <- which(Dm >= 0.999);
jj00 <- which(Dm == 0);
# A SNP with 80% TP rate
jj80 <- which(Dm >= 0.80);
# A SNP with 95% TP rate
jj999 <- which(Dm >= 0.999);
jj00
jj000 <- which(Dm == 0)[1];
# A SNP with 80% TP rate
jj800 <- which(Dm >= 0.80)[1];
# A SNP with 95% TP rate
jj999 <- which(Dm >= 0.999)[1];
jj000
jj800
jj999
dev.off(); source("roc.Rex")
# A SNP with 60% TP rate
jj600 <- which(Dm >= 0.60)[1];
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
jj000 <- which(Dm == 0);
jj000 <- jj000[jj000 > 100][1];
# A SNP with 60% TP rate
jj600 <- which(Dm >= 0.60);
jj600 <- jj600[jj600 > 100][1];
# A SNP with 80% TP rate
jj800 <- which(Dm >= 0.80);
jj800 <- jj800[jj800 > 100][1];
# A SNP with 95% TP rate
jj999 <- which(Dm >= 0.999);
jj999 <- jj999[jj999 > 100][1];
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
jj600
Dm <- apply(D, MARGIN=1, FUN=min, na.rm=TRUE);
# A SNP with 0% TP rate
jj000 <- which(Dm == 0);
jj000 <- jj000[jj000 > 100][1];
# A SNP with 60% TP rate
jj600 <- which(Dm >= 0.60);
jj600 <- jj600[jj600 > 100][1];
# A SNP with 80% TP rate
jj800 <- which(Dm >= 0.80);
jj800 <- jj800[jj800 > 100][1];
# A SNP with 95% TP rate
jj999 <- which(Dm >= 0.999);
jj999 <- jj999[jj999 > 100][1];
Dm
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
jj000 <- which(Dm == 0);
jj000
jj000 <- which(Dm == 0);
# A SNP with 60% TP rate
jj600 <- which(Dm >= 0.60);
# A SNP with 80% TP rate
jj800 <- which(Dm >= 0.80);
# A SNP with 95% TP rate
jj999 <- which(Dm >= 0.999);
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
str(Dm)
Dm <- rowMedians.matrix(D, na.rm=TRUE);
#Dm <- apply(D, MARGIN=1, FUN=min, na.rm=TRUE);
# A SNP with 0% TP rate
jj000 <- which(Dm == 0);
# A SNP with 60% TP rate
jj600 <- which(Dm >= 0.60);
# A SNP with 80% TP rate
jj800 <- which(Dm >= 0.80);
# A SNP with 95% TP rate
jj999 <- which(Dm >= 0.999);
Dm <- rowMedians.matrix(D, na.rm=TRUE);
dev.off(); source("roc.Rex")
dev.off(); source("roc.Rex")
jj600 <- which(0.59 <= Dm <= 0.61);
# A SNP with 80% TP rate
jj800 <- which(0.79 <= Dm <= 0.81);
jj600 <- which(0.59 <= Dm & Dm <= 0.61);
# A SNP with 80% TP rate
jj800 <- which(0.79 <= Dm & Dm <= 0.81);
dev.off(); source("roc.Rex")
jj600
Dm[jj600]
jj <- setdiff(jj600, 1:100)[1];
jj
Dm[jj]
D[jj,]
dev.set(5); dev.off(); source("roc.Rex")
dev.set(5); dev.off(); source("roc.Rex")
dev.set(5); dev.off(); source("roc.Rex")
snpName
dev.set(5); dev.off(); source("roc.Rex")
dev.set(5); dev.off(); source("roc.Rex")
dev.set(5); dev.off(); source("roc.Rex")
dev.set(5); dev.off(); source("roc.Rex")
dev.set(5); dev.off(); source("roc.Rex")
dev.set(6); dev.off(); source("roc.Rex")
1:3*fpStep
1:3*fpStep/2
dev.set(2)
rm(sets)
source("roc.Rex")
source("roc.Rex")
rm(sets)
source("roc.Rex")
traceback()
str(C)
str(o)
str(cc)
str(keep)
source("roc.Rex")
traceback()
dev.set(2); dev.off()
source("roc.Rex")
sets[[1]]$col <- niceCols[4]
dev.set(2); dev.off()
source("roc.Rex")
sets[[2]]$col <- niceCols[4]
sets[[1]]$col <- niceCols[6]
sets[[3]]$col <- niceCols[2]
dev.set(2); dev.off()
source("roc.Rex")
dev.set(2); dev.off(); source("roc.Rex")
dev.set(2); dev.off(); source("roc.Rex")
dev.set(6); dev.off(); source("roc.Rex")
rm(sets)
dev.set(6); dev.off(); source("roc.Rex")
dev.set(6); dev.off(); source("roc.Rex")
dev.set(6); dev.off(); source("roc.Rex")
dev.set(6); dev.off(); source("roc.Rex")
dev.set(6); dev.off(); source("roc.Rex")
source("rocAvg.Rex")
source("rocAvg.Rex")
colnames(truth)
colnames(truth)[32]
mavgR <- 23
isInteger <- (mavgR == as.integer(mavgR));
isInteger
mavgR <- 23.001
isInteger <- (mavgR == as.integer(mavgR));
isInteger
n <- 10
K <- 4
n %% R
R <- 4
n %% R
ceiling(1)
ceiling(1.000)
ceiling(1.0001)
k %/% R
n %/% R
8 %/% 4
10 %/% 4
10 / 4
8 / 4
K <- ceiling(n/R);
K
R
n
  idxs <- matrix(seq_len(n), nrow=R, ncol=K);
n
R
  K <- ceiling(n/R);
  idxs <- matrix(NA, nrow=R, ncol=K);
K
n <- 100
n <- 20
K <- 3.5
R <- 3.5
  K <- ceiling(n/R);
K
  idxs <- matrix(NA, nrow=R, ncol=K);
idxs
  idxs <- matrix(TRUE, nrow=R, ncol=K);
idxs
  last <- idxs[,K];
last
  last <- rep(FALSE, R);
seq(from=1, to=R, length=R)
R
  idxs <- matrix(TRUE, nrow=ceiling(R), ncol=K);
idxs
  last <- rep(FALSE, ceiling(R));
seq(from=1, to=ceiling(R), length=R)
2.5 %% 1
seq(from=1, to=ceiling(R), length=(R %% 1) * ceiling(R))
n <- 100
  steps <- (R %% 1) * ceiling(R);
steps
  steps <- (R %% 1) * ceiling(K);
steps
K
idxs
  steps <- (R %% 1) * ceiling(K);
steps
R
R %% 1
  incl <- seq(from=1, to=K, length=steps);
incl
  incl <- round(incl);
incl
  idxs[-incl] <- FALSE;
idxs
  idxs[ceiling(R),-incl] <- FALSE;
idxs
ceiling(R)
  K <- ceiling(n/R);
  idxs <- matrix(TRUE, nrow=ceiling(R), ncol=K);
  steps <- (R %% 1) * ceiling(K);
  incl <- seq(from=1, to=K, length=steps);
  incl <- round(incl);
  idxs[ceiling(R), -incl] <- FALSE;
idxs
sum(idxs)
n
  idxs[idxs] <- seq_len(n);
idxs
n %% R
if (n %% R != 0)
  idxs <- idxs[,-ncol(idxs)];
idxs
  idxs[idxs == 0] <- NA;
idxs
R <- 3.3
  K <- ceiling(n/R);
  idxs <- matrix(TRUE, nrow=ceiling(R), ncol=K);
  steps <- (R %% 1) * ceiling(K);
  incl <- seq(from=1, to=K, length=steps);
  incl <- round(incl);
  idxs[ceiling(R), -incl] <- FALSE;
  idxs[idxs] <- seq_len(n);
  idxs[idxs == 0] <- NA;
idxs
  idxs <- idxs[,-ncol(idxs)];
idxs[4,]
is.na(idxs[4,])
mean(is.na(idxs[4,]))
Rest <- mean(!is.na(idxs));
Rest
idxs
length(idxs)
sum(!is.na(idxs));
sum(is.na(idxs));
sum(!is.na(idxs))/sum(is.na(idxs));
sum(!is.na(idxs))/sum(is.na(idxs))
120/21
99/120
120/99
99/120*4
sum(!is.na(idxs))/ncol(idxs)
Rest <- sum(!is.na(idxs))/ncol(idxs);
Rest
verbose && printf("R=%.3f, Rapprox=%.3f\n", R, Rapprox);
verbose && printf(verbose, "R=%.3f, Rapprox=%.3f\n", R, Rapprox);
Rapprox <- sum(!is.na(idxs))/ncol(idxs);
verbose && printf(verbose, "R=%.3f, Rapprox=%.3f\n", R, Rapprox);
cc
sets
set <- sets[[1]]
str(x)
  o <- order(x);
  truth <- truth[o,];
  x <- x[o];
  attr(x, "order") <- o;
  attr(x, "isOrdered") <- TRUE;
str(x)
kk <- 1
  name <- names(sets)[kk];
name
  set <- sets[[name]];
  # Get reordered data
  o <- attr(x, "order");
  M <- set$M[o,];
  A <- set$A[o,];
  na.rm <- (any(is.na(M)) || any(is.na(idxs)));
na.rm
  dimnames <- dimnames(M);
  dimnames(M) <- NULL;
idxs
source("rocAvg.Rex")
source("rocAvg.Rex")
source("rocAvg.Rex")
source("rocAvg.Rex")
str(sets)
str(Z)
source("rocAvg.Rex")
str(Z)
str(C)
source("rocAvg.Rex")
str(Z)
source("rocAvg.Rex")
  set$x <- blockAvg(x[o,], idxs);
str(x)
str(o)
  set$x <- blockAvg(x[o], idxs);
str(set)
set$x
str(idxs)
  set$M <- blockAvg(set$M[o,], idxs);
  set$A <- blockAvg(set$A[o,], idxs);
  set$C <- blockAvg(truth[o,], idxs);
  set$truth <- blockAvg(truth[o,], idxs);
  newName <- sprintf("%s,R=%.3f", name, R);
newName
source("rocAvg.Rex")
traceback()
str(set$A)
str(set)
source("rocAvg.Rex")
str(sets)
source("rocAvg.Rex")
rm(sets)
source("rocAvg.Rex")
str(sets)
source("rocAvg.Rex")
source("roc.Rex")
traceback()
source("roc.Rex")
str(sets)
dev.set(2); dev.off(); source("rocMain.Rex")
dev.set(2); dev.off(); source("rocMain.Rex")
dev.set(2); dev.off(); source("rocMain.Rex")
dev.off()
dev.off()
source("rocMain.Rex")
source("rocMain.R")
dev.set(2); dev.off(); source("rocMain.Rex")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
traceback()
source("rocAvg.Rex")
source("rocAvg.Rex")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
dev.set(2); dev.off(); source("rocMain.R")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
dev.set(2); dev.off(); source("rocMain.R")
source("rocAvg.Rex")
source("rocAvg.Rex")
source("rocAvg.Rex")
source("rocAvg.Rex")
source("rocAvg.Rex")
source("rocAvg.Rex")
source("roc.Rex")
source("roc.Rex")
source("rocMain.Rex")
source("rocMain.Rex")
source("rocMain.R")
dev.set(2); dev.off(); source("rocMain.R")
dev.set(2); dev.off(); source("rocMain.R")
length(sets)
grep("R=1.0", names(sets))
regexpr("R=1.0", names(sets))
(regexpr("R=1.0", names(sets)) == -1)
sets[(regexpr("R=1.0", names(sets)) == -1)]
sets <- sets[(regexpr("R=1.0", names(sets)) == -1)]
length(sets)
dev.set(2); dev.off(); source("rocMain.R")
sets <- sets[(regexpr("R=1.55", names(sets)) == -1)]
sets <- sets[(regexpr("R=1.6", names(sets)) == -1)]
sets <- sets[(regexpr("R=1.7", names(sets)) == -1)]
length(sets)
dev.set(2); dev.off(); source("rocMain.R")
