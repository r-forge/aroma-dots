library(aroma.affymetrix)

# source("../aroma.affymetrix/R/CopyNumberSegmentationModel.R");
# source("../aroma.affymetrix/R/GladModel.R");
# source("../aroma.affymetrix/R/CbsModel.R");
# source("../aroma.affymetrix/R/profileCGH.drawCnRegions.R");
# source("../aroma.affymetrix/R/DNAcopy.drawCnRegions.R");
# source("../aroma.affymetrix/R/CopyNumberRegions.R");
# source("../aroma.affymetrix/R/RawCopyNumbers.R");

log <- Verbose(threshold=-4, timestamp=TRUE);

dataSetName <- "Affymetrix_2004-100k_trios,testSet";
chipTypes <- c("Mapping50K_Hind240", "Mapping50K_Xba240");
#chipTypes <- chipTypes[2];

# Expected sample names
sampleNames <- c("NA06985", "NA06991", "NA06993", 
                 "NA06994", "NA07000", "NA07019");

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Tests for setting up CEL sets and locating the CDF file
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
csRawList <- list();
for (chipType in chipTypes) {
  cs <- AffymetrixCelSet$fromName(dataSetName, chipType=chipType, verbose=log);
  print(cs);
  stopifnot(identical(getNames(cs), sampleNames));
  csRawList[[chipType]] <- cs;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Allelic cross-talk calibration tests
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
csList <- csRawList;
csAccList <- list();
for (chipType in names(csList)) {
  cs <- csList[[chipType]];
  acc <- AllelicCrosstalkCalibration(cs);
  print(acc);
  csAcc <- process(acc, verbose=log);
  print(csAcc);
  stopifnot(identical(getNames(csAcc), getNames(cs)));
  csAccList[[chipType]] <- csAcc;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Probe-level modelling test (for CN analysis)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
csList <- csAccList;
cesCnList <- list();
for (chipType in names(csList)) {
  cs <- csList[[chipType]];
  plm <- RmaCnPlm(cs, mergeStrands=TRUE, combineAlleles=TRUE, 
                                              tags=c("+300", "*", "w"));
  plm$shift <- +300;
  plm$treatNAsAs <- "NA";
  plm$treatNAsAs <- "weighted";
  print(plm);
  fit(plm, ram=1/2, verbose=log);
  ces <- getChipEffectSet(plm);
  print(ces);
  stopifnot(identical(getNames(ces), getNames(cs)));
  cesCnList[[chipType]] <- ces;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Fragment-length normalization test
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cesCnList <- cesCnList;
cesFlnList <- list();
for (chipType in names(csList)) {
  ces <- cesCnList[[chipType]];
  fln <- FragmentLengthNormalization(ces);
#  excludeChrXFromFit(fln);  # TO DO
  print(fln);
  cesFln <- process(fln, verbose=verbose);
  print(cesFln);
  stopifnot(identical(getNames(cesFln), getNames(ces)));
  cesFlnList[[chipType]] <- cesFln;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set up list of CN segmenation models
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cnsList <- list(
  "glad" = GladModel(cesFlnList),
   "cbs" = CbsModel(cesFlnList)
);
print(cnsList);


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Benchmarking
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
verbose <- FALSE;
force <- FALSE;
arrays <- 1;
chromosomes <- 2;
models <- list(GLAD=glad, CBS=cbs);
t <- vector("list", length(models));
fits <- list();
for (mm in names(models)) {
  print(mm);
  gc();
  t[[mm]] <- system.time({
    fits[[mm]] <- fit(models[[mm]], arrays=arrays, chromosomes=chromosomes, .retResults=TRUE, force=force, verbose=verbose)[[arrays[1]]][[chromosomes]];
  });
}
print(t);

# There is a known CN deletion at chr 2 @ 83.0MB in NA06985.
ylim <- c(-2,2);
xlim <- c(81,86)*1e6;


cn <- cnr <- list();
for (set in names(fits)) {
  cn[[set]] <- extractRawCNs(fits[[set]]);
  cnr[[set]] <- extractCNRs(fits[[set]]);
}

plot(cn$GLAD, xlim=xlim, ylim=ylim);
abline(h=0, lty=2, col="#cccccc");

for (set in names(cnr)) {
  drawLevels(cnr[[set]], col=c(GLAD="red", CBS="blue")[set]);
}

# graphics.off();
