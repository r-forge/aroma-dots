BASEfile
section	plugin
uniqueName	braju.com/hb/helloWorld
versionNumber	0.4.2
name	Test: 'Hello world' by aroma.Base for R
descr	Generic R plugin dispatcher for BASE in the aroma.Base package by Henrik Bengtsson (2005).\r\n\r\nThis specific "Hello world" plugin demonstrates the dispatchers functionality by printing a user-defined welcome message (sent from BASE), the list of arguments passed to the plugin, the code of the plugin, and then returns (here without return data).\r\n\r\nHOW TO WRITE A PLUGIN USING AROMA.BASE:\r\nTo write an R plugin for BASE, just create a file onRun.R that defines the function \r\n\r\n  onRun <- function(data, ..., pluginVersion="1.0") {\r\n    <your code here>\r\n  }\r\n\r\nwhich should accept a BaseFile object as the first argument, and the plugin in parameters send from BASE as additional arguments. The BASE parameters are passed to onRun() as named R arguments.  The data sent from BASE (via standard input) is already parsed and easily accessed via the methods of the BaseFile class.  See ?BaseFile in R for details.\r\n\r\nIn summary, you have to:\r\n\r\n1) Create a plugin directory, say, ~/plugins/myPlugin/\r\n\r\n2) Copy the generic 'basePluginDispatcher' Unix shell script to this directory. Change file rights to be executable, i.e. 'chmod ugo+x basePluginDispatcher'.  If aroma.Base is installed neither system-wide nor in '~/plugins/library/, update this file with path to local installation, e.g. add R_LIBS="$R_LIBS:~hb/plugins/library".\r\n\r\n3) Create a onRun.R defining onRun() in same directory.  All other *.R scripts in this directory will also be sourced.  R libraries installed locally in '<pluginPath>/../library/' (e.g. ~/plugins/library/) will be found automatically via 'library(<pkg>)'.\r\n\r\n4) Setup plugin in BASE plugin settings.  Use executable '<pluginRoot>/myPlugin/basePluginDispatcher'. Data must be send as a "serial" BASEfile\!\r\n\r\n5) Test it\!\r\n\r\n\r\nREQUIREMENTS AND INSTALLATION OF AROMA.BASE:\r\nThe aroma.Base package requires R v2.1.0 or newer.  To be able to use this generic R BASE plugin dispatcher, the following R packages must be installed on the BASE system:\r\n\r\n1) aroma.Base\r\n2) R.utils\r\n3) R.oo\r\n\r\nIdeally these are installed by the system adminstrator for system-wide access, but it is also possible to install this locally.  If installed in, say, ~/plugins/library/ and the plugin is installed in ~/plugins/myPlugin/, the 'basePluginDispatcher' script will automatically be able to find the packages.  If installed locally elsewhere, modify the script according to step 2 in previous section.\r\n\r\nTo install the above packages, do the following from R:\r\n\r\nsource("http://www.braju.com/R/hbLite.R"); hbLite("aroma.Base")\r\n\r\nTo install packages locally, add argument 'lib', e.g. 'lib=~/plugins/library/'.\r\n\r\n\r\nPROCESSING PARAMETERS WHEN LOADED:\r\nBy defining onParameters() taking plugin parameters as arguments (no 'data' object here, cf. onRun()), one can check plugin parameters as soon as they are loaded, that is, before any data is read.  Thus, if there are erroneous plugin parameters, an error can be reported immediately, without having to wait for data to be read.  Moreover, by returning modified plugin parameters in a named list, one can use onParameters() to updated parameters at this stage, leaving onRun() to focus on processing only.   Typically, one wants to convert plugin parameters, which are all character strings, to numeric values.\r\n\r\n\r\nINTERNAL PLUGIN COMMANDS:\r\nIf plugin parameter 'internalCommands', which should contain tab-delimited strings, contains the command 'copySource', all source files are copied to the working directory.  \r\n\r\n\r\nPOST-PROCESSING SCRIPTS:\r\nIf a script named 'postPluginScript' exists in the plugin directory, it will be called (by 'basePluginDispatcher') after the R plugin finishes.  As long as this script is executable, it can be of any language, e.g. a perl or a bash script.  The data send from base is available in the 'stdin.txt' file.  The (optional) BASE data written by the R plugin is available in 'stdout.txt'.  Note that modifying 'stdout.txt' has (unfortunately) no effect\!\r\n\r\nWARNINGS AND ERRORS:\r\nWarning and error messages are outputted to the log file as well as the standard error of the plugin dispatcher, which then in turn is imported to BASE as "plugin messages".  In addition, an error interrupts the execution of the plugin, whereas a warning does not.  Warnings and errors are _not_ outputted to the resulting BASE file, i.e. the standard output of the dispatcher.\r\n\r\nTIPS'N'TRICKS:\r\nOn Windows, in order to see the 'plugin.log' in your web browser and not in Notepad, you might want to remove the file type 'LOG' from known file types. Open "This Computer", go to menu "Tools -> Folder Options..." and select tab "File Types". Find "LOG" in the list and "Remove" it. Press "OK".\r\n\r\n\r\nBUG REPORTING:\r\nPlease report bugs to author Henrik Bengtsson <henrikb\@braju.com>.  Do not forget to report version of R, and version of aroma.Base and friends; start R and do library(aroma.Base) and cut'n'paste the startup messages.\r\n\r\n
execName	braju.com/hb/helloWorld/basePluginDispatcher
geneAverages	0
serialFormat	1
url	http://www.braju.com/R/
minChannels	2
maxChannels	0
leaveStdin	1
leaveStdout	1
estimatedTime	20
defaultMaxRam	134217728
usedColumns	position\treporter
usedFields	intensity1\tintensity2
columns	position	valueType	name	commonName	options	defaultValue	enumOptions	removed
%
1	h	section			parameters		0
2	t	welcomeMessage	Welcome message	30	Hello world\!		0
3	t	internalCommands	Internal plugin commands	30			0

