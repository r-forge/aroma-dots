%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Henrik Bengtsson, hb@stat.berkeley.edu
% Created on: 2009-02-23
%
% Usage:
%  library("R.rsp");
%  rsptex("main.tex.rsp");  # => *.tex.rsp => ... => *.dvi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
<%
title <- "Multi-source Copy-number Normalization (MSCN)";
authors <- "Henrik Bengtsson et al.";
figPath <- "figures/col/";
figForce <- FALSE;
figDev <- function(..., force=figForce) { epsDev(..., path=figPath, force=force) }
%>

\documentclass[a4paper]{article}
\usepackage{graphicx}
\usepackage{fancyvrb}
\usepackage{a4wide}

% The search path (within curly brackets and separated by commas)
% where to find graphics files
\graphicspath{{<%=figPath%>}}
\DeclareGraphicsRule{.eps.gz}{eps}{.eps.bb}{`gunzip -c #1}

\title{<%=title%>}
\author{<%=authors%>}

\begin{document}

\maketitle

<%
sourceDirectory("R/");
%>

\section{Dataset}
\begin{Verbatim}[fontfamily=helvetica]
<%={x <- capture.output(print(dsList));x <- gsub(": .*/(rawCnData/)", ": \\1", x);paste(x, collapse="\n");}%>
\end{Verbatim}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MSCN
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Normalization}
<%
ugp <- AromaUgpFile$byChipType("GenericHuman", tags="100kb");
mscn <- MultiSourceCopyNumberNormalization(dsList, fitUgp=ugp);
dsNList <- process(mscn, verbose=FALSE);
%>

\begin{Verbatim}[fontfamily=helvetica]
<%={x <- capture.output(print(dsNList));x <- gsub(": .*/(rawCnData/)", ": \\1", x);paste(x, collapse="\n");}%>
\end{Verbatim}

cnList <- NULL;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Regions of interest
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<% for (region in regions) { %>
\clearpage
\subsection{Region: <%=region%>}

<%
print(region);
region <- parseRegion(region);
print(region);
cnList <- NULL;

targetChipType <- NULL;
%>



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
figName <- sprintf("%s,track", region$label);
if (fig <- figDev(figName)) {

cnList <- getCnList(cnList);
names(cnList) <- sprintf("%s\n%s\n%s", sites, platforms, chipTypes); 
print(cnList);

xRange <- range(sapply(cnList, FUN=xRange));

Mlim <- c(-1,1)*1;
xlim <- xRange;

layout(seq(along=cnList));
par(mar=c(4.2,4.2,1.3,2.1));
pch <- 176; cex <- 0.8;
for (kk in seq(along=cnList)) {
  cn <- cnList[[kk]];
  plot(cn, xlim=xlim, ylim=Mlim);
  stext(side=3, pos=0, cex=0.8, region$name);
  stext(side=3, pos=1, cex=0.8, sprintf("Chr%02d (n=%d)", region$chromosome,
                                                             nbrOfLoci(cn)));

  binWidth <- 50e3;
  cnS <- binnedSmoothingByState(cn, from=xRange[1], to=xRange[2], by=binWidth);
  points(cnS, cex=1, col="white");
  points(cnS, cex=0.5, col="blue"); 
  label <- strsplit(names(cnList)[kk], split="\n")[[1]];
  label <- paste(label[-3], collapse="/");
  label <- sprintf("Raw and %g-kb binned CNs from %s", binWidth/1e3, label);
  stext(side=3, pos=0, cex=0.8, label);
} # for (kk ...)

devDone(figName);
} # if (figDev(...))
%>
\begin{figure}[htb]
 \begin{center}
  \resizebox{0.8\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}
 \end{center}
 \caption{<%=region$src%>}
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
figName <- sprintf("%s,ROC", region$label);
if (fig <- figDev(figName)) {

cnList <- getCnList(cnList);
names(cnList) <- sprintf("%s\n%s\n%s", sites, platforms, chipTypes); 
print(cnList);

xRange <- range(sapply(cnList, FUN=xRange));
states <- na.omit(sort(unique(getStates(cnList[[1]]))));

binWidths <- c(10,25,50,100)*1e3;
fpLim <- c(0,0.25);

layout(matrix(seq(along=binWidths), ncol=2, byrow=TRUE));
par(mar=c(3,3,2,1)+0.1, mgp=c(1.4,0.4,0));
for (ww in seq(along=binWidths)) {
  binWidth <- binWidths[ww];

  # Smooth CNs using consecutive bins of given width (in kb)
  cnSList <- lapply(cnList, FUN=function(cn) {
    cnS <- binnedSmoothingByState(cn, from=xRange[1], to=xRange[2], by=binWidth);
    cnS <- extractSubsetByState(cnS, states=states);
    cnS;
  })
  print(cnSList);

  fits <- lapply(cnSList, FUN=function(cnS) {
    fitRoc(cnS, states=states, recall=states[1]);
  });

  for (kk in seq(along=fits)) {
    fit <- fits[[kk]];
    roc <- fit$roc;
    if (kk == 1) {
      plot(roc, type="l", lwd=3, col=kk, xlim=fpLim, ylim=sort(1-fpLim));
      abline(a=0, b=1, lty=3);
      stext(side=3, pos=1, sprintf("Bin width %g kb", binWidth/1e3));
    } else {
      lines(roc, lwd=3, col=kk);
    }
  } # for (kk ...)
} # for (ww ...)

labels <- strsplit(names(cnList), split="\n");
labels <- sapply(labels, FUN=function(s) paste(s[-3], collapse="/"));
legend("bottomright", col=seq(along=labels), pch=19, labels, cex=0.8, bty="n");

devDone(figName);
} # if (figDev(...))
%>
\begin{figure}[htb]
 \begin{center}
  \resizebox{0.8\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}
 \end{center}
 \caption{<%=region$src%>}
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEGIN Figure
%
% TP rate at fixe FP rate at various resolutions (in kb)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<%
figName <- sprintf("%s,TPvsResolution", region$label);
if (fig <- figDev(figName)) {

cnList <- getCnList(cnList);
names(cnList) <- sprintf("%s\n%s\n%s", sites, platforms, chipTypes); 

xRange <- range(sapply(cnList, FUN=xRange));
states <- na.omit(sort(unique(getStates(cnList[[1]]))));

nbrOfTracks <- length(cnList);
trackCols <- seq(length=nbrOfTracks);

fpRate <- 0.02;
binWidths <- c(5,10,20,30,40,50,60,70,80,90,100)*1e3;
binWidths <- seq(from=1,to=50,by=3)*1e3;

xlim <- c(0,max(binWidths))/1e3;
tplim <- c(0,1);
tplab <- "True-positive rate";
xlab <- "Width of bins (in kb)";
par(mar=c(3,3,2,1)+0.1, mgp=c(1.4,0.4,0));
plot(NA, xlim=xlim, ylim=tplim, xlab=xlab, ylab=tplab);
stext(side=3, pos=0, region$name);
labels <- apply(names[,-2], MARGIN=1, paste, collapse="/");
legend("bottomright", col=trackCols, pch=19, labels, cex=0.8, bty="n");

naValue <- as.double(NA);
tpRates <- matrix(naValue, nrow=length(binWidths), ncol=nbrOfTracks);
colnames(tpRates) <- apply(names, MARGIN=1, paste, collapse=";");
colnames(tpRates) <- names(cnList);
res <- cbind(data.frame(binWidth=binWidths), tpRates);

for (ww in seq(along=binWidths)) {
  binWidth <- binWidths[ww];

  # Smooth CNs using consecutive bins of given width (in kb)
  cnSList <- lapply(cnList, FUN=function(cn) {
    cnS <- binnedSmoothingByState(cn, from=xRange[1]+binWidth/2, to=xRange[2]+binWidth/2, by=binWidth);
    cnS <- extractSubsetByState(cnS, states=states);
    cnS;
  })
  print(cnSList);

  fits <- lapply(cnSList, FUN=function(cnS) {
    findRocTpAtFp(cnS, fpRate=fpRate, states=states, recall=states[1]);
  });

  tpRates <- sapply(fits, FUN=function(fit) fit[["tpRateEst"]]);
  cols <- match(names(tpRates), colnames(res));
  row <- whichVector(res[,"binWidth"] == binWidth);
  res[row,cols] <- tpRates;

  x <- rep(binWidth/1e3, nbrOfTracks);
  points(x, y=tpRates, pch=19, col=trackCols);
} # for (ww ...)

o <- order(res[,"binWidth"]);
res <- res[o,,drop=FALSE];

for (kk in seq(length=nbrOfTracks)) {
  binWidths <- res[,"binWidth"];
  tpRates <- res[,kk+1];
  lines(binWidths/1e3, tpRates, lwd=2, col=trackCols[kk]);
}
 

devDone(figName);
} # if (figDev(...))
%>
\begin{figure}[htb]
 \begin{center}
  \resizebox{0.8\textwidth}{!}{\includegraphics{<%=fig$fullname%>}}
 \end{center}
 \caption{<%=region$src%>}
 \label{fig<%=figName%>}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Figure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%





<% } # for (region in regions) %>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% END Regions of interest
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Session information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Session information}
<%=toLatex(sessionInfo())%>

\end{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HISTORY:
% 2009-02-23
% o Created.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
